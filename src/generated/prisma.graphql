# source: http://localhost:4466
# timestamp: Fri Jan 17 2020 10:24:53 GMT+0000 (Coordinated Universal Time)

type AggregateBlock {
  count: Int!
}

type AggregateBlockChain {
  count: Int!
}

type AggregateCareProvider {
  count: Int!
}

type AggregateCountry {
  count: Int!
}

type AggregateDatabaseAdmin {
  count: Int!
}

type AggregateHospital {
  count: Int!
}

type AggregateICDCode {
  count: Int!
}

type AggregateICDSubCode {
  count: Int!
}

type AggregateInsurance {
  count: Int!
}

type AggregateMedicalPractitioner {
  count: Int!
}

type AggregatePatient {
  count: Int!
}

type AggregatePatientCase {
  count: Int!
}

type AggregatePatientRecord {
  count: Int!
}

type AggregateRegion {
  count: Int!
}

type AggregateSharedCase {
  count: Int!
}

type AggregateSharedRecord {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type Block implements Node {
  id: ID!
  blockNumber: Int!
  timestamp: DateTime!
  lastHash: String!
  hash: String!
  data: String!
  nonce: Int!
  difficulty: Int!
}

type BlockChain implements Node {
  id: ID!
  user: User!
  blocks(where: BlockWhereInput, orderBy: BlockOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Block!]
}

"""A connection to a list of items."""
type BlockChainConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [BlockChainEdge]!
  aggregate: AggregateBlockChain!
}

input BlockChainCreateInput {
  id: ID
  user: UserCreateOneInput!
  blocks: BlockCreateManyInput
}

"""An edge in a connection."""
type BlockChainEdge {
  """The item at the end of the edge."""
  node: BlockChain!

  """A cursor for use in pagination."""
  cursor: String!
}

enum BlockChainOrderByInput {
  id_ASC
  id_DESC
}

type BlockChainPreviousValues {
  id: ID!
}

type BlockChainSubscriptionPayload {
  mutation: MutationType!
  node: BlockChain
  updatedFields: [String!]
  previousValues: BlockChainPreviousValues
}

input BlockChainSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [BlockChainSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: BlockChainWhereInput
}

input BlockChainUpdateInput {
  user: UserUpdateOneRequiredInput
  blocks: BlockUpdateManyInput
}

input BlockChainWhereInput {
  """Logical AND on all given filters."""
  AND: [BlockChainWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  user: UserWhereInput
  blocks_some: BlockWhereInput
}

input BlockChainWhereUniqueInput {
  id: ID
}

"""A connection to a list of items."""
type BlockConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [BlockEdge]!
  aggregate: AggregateBlock!
}

input BlockCreateInput {
  id: ID
  blockNumber: Int!
  lastHash: String!
  hash: String!
  data: String!
  nonce: Int!
  difficulty: Int!
}

input BlockCreateManyInput {
  create: [BlockCreateInput!]
  connect: [BlockWhereUniqueInput!]
}

"""An edge in a connection."""
type BlockEdge {
  """The item at the end of the edge."""
  node: Block!

  """A cursor for use in pagination."""
  cursor: String!
}

enum BlockOrderByInput {
  id_ASC
  id_DESC
  blockNumber_ASC
  blockNumber_DESC
  timestamp_ASC
  timestamp_DESC
  lastHash_ASC
  lastHash_DESC
  hash_ASC
  hash_DESC
  data_ASC
  data_DESC
  nonce_ASC
  nonce_DESC
  difficulty_ASC
  difficulty_DESC
}

type BlockPreviousValues {
  id: ID!
  blockNumber: Int!
  timestamp: DateTime!
  lastHash: String!
  hash: String!
  data: String!
  nonce: Int!
  difficulty: Int!
}

input BlockScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [BlockScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [BlockScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BlockScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  blockNumber: Int

  """All values that are not equal to given value."""
  blockNumber_not: Int

  """All values that are contained in given list."""
  blockNumber_in: [Int!]

  """All values that are not contained in given list."""
  blockNumber_not_in: [Int!]

  """All values less than the given value."""
  blockNumber_lt: Int

  """All values less than or equal the given value."""
  blockNumber_lte: Int

  """All values greater than the given value."""
  blockNumber_gt: Int

  """All values greater than or equal the given value."""
  blockNumber_gte: Int
  timestamp: DateTime

  """All values that are not equal to given value."""
  timestamp_not: DateTime

  """All values that are contained in given list."""
  timestamp_in: [DateTime!]

  """All values that are not contained in given list."""
  timestamp_not_in: [DateTime!]

  """All values less than the given value."""
  timestamp_lt: DateTime

  """All values less than or equal the given value."""
  timestamp_lte: DateTime

  """All values greater than the given value."""
  timestamp_gt: DateTime

  """All values greater than or equal the given value."""
  timestamp_gte: DateTime
  lastHash: String

  """All values that are not equal to given value."""
  lastHash_not: String

  """All values that are contained in given list."""
  lastHash_in: [String!]

  """All values that are not contained in given list."""
  lastHash_not_in: [String!]

  """All values less than the given value."""
  lastHash_lt: String

  """All values less than or equal the given value."""
  lastHash_lte: String

  """All values greater than the given value."""
  lastHash_gt: String

  """All values greater than or equal the given value."""
  lastHash_gte: String

  """All values containing the given string."""
  lastHash_contains: String

  """All values not containing the given string."""
  lastHash_not_contains: String

  """All values starting with the given string."""
  lastHash_starts_with: String

  """All values not starting with the given string."""
  lastHash_not_starts_with: String

  """All values ending with the given string."""
  lastHash_ends_with: String

  """All values not ending with the given string."""
  lastHash_not_ends_with: String
  hash: String

  """All values that are not equal to given value."""
  hash_not: String

  """All values that are contained in given list."""
  hash_in: [String!]

  """All values that are not contained in given list."""
  hash_not_in: [String!]

  """All values less than the given value."""
  hash_lt: String

  """All values less than or equal the given value."""
  hash_lte: String

  """All values greater than the given value."""
  hash_gt: String

  """All values greater than or equal the given value."""
  hash_gte: String

  """All values containing the given string."""
  hash_contains: String

  """All values not containing the given string."""
  hash_not_contains: String

  """All values starting with the given string."""
  hash_starts_with: String

  """All values not starting with the given string."""
  hash_not_starts_with: String

  """All values ending with the given string."""
  hash_ends_with: String

  """All values not ending with the given string."""
  hash_not_ends_with: String
  data: String

  """All values that are not equal to given value."""
  data_not: String

  """All values that are contained in given list."""
  data_in: [String!]

  """All values that are not contained in given list."""
  data_not_in: [String!]

  """All values less than the given value."""
  data_lt: String

  """All values less than or equal the given value."""
  data_lte: String

  """All values greater than the given value."""
  data_gt: String

  """All values greater than or equal the given value."""
  data_gte: String

  """All values containing the given string."""
  data_contains: String

  """All values not containing the given string."""
  data_not_contains: String

  """All values starting with the given string."""
  data_starts_with: String

  """All values not starting with the given string."""
  data_not_starts_with: String

  """All values ending with the given string."""
  data_ends_with: String

  """All values not ending with the given string."""
  data_not_ends_with: String
  nonce: Int

  """All values that are not equal to given value."""
  nonce_not: Int

  """All values that are contained in given list."""
  nonce_in: [Int!]

  """All values that are not contained in given list."""
  nonce_not_in: [Int!]

  """All values less than the given value."""
  nonce_lt: Int

  """All values less than or equal the given value."""
  nonce_lte: Int

  """All values greater than the given value."""
  nonce_gt: Int

  """All values greater than or equal the given value."""
  nonce_gte: Int
  difficulty: Int

  """All values that are not equal to given value."""
  difficulty_not: Int

  """All values that are contained in given list."""
  difficulty_in: [Int!]

  """All values that are not contained in given list."""
  difficulty_not_in: [Int!]

  """All values less than the given value."""
  difficulty_lt: Int

  """All values less than or equal the given value."""
  difficulty_lte: Int

  """All values greater than the given value."""
  difficulty_gt: Int

  """All values greater than or equal the given value."""
  difficulty_gte: Int
}

type BlockSubscriptionPayload {
  mutation: MutationType!
  node: Block
  updatedFields: [String!]
  previousValues: BlockPreviousValues
}

input BlockSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [BlockSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: BlockWhereInput
}

input BlockUpdateDataInput {
  blockNumber: Int
  lastHash: String
  hash: String
  data: String
  nonce: Int
  difficulty: Int
}

input BlockUpdateInput {
  blockNumber: Int
  lastHash: String
  hash: String
  data: String
  nonce: Int
  difficulty: Int
}

input BlockUpdateManyDataInput {
  blockNumber: Int
  lastHash: String
  hash: String
  data: String
  nonce: Int
  difficulty: Int
}

input BlockUpdateManyInput {
  create: [BlockCreateInput!]
  connect: [BlockWhereUniqueInput!]
  set: [BlockWhereUniqueInput!]
  disconnect: [BlockWhereUniqueInput!]
  delete: [BlockWhereUniqueInput!]
  update: [BlockUpdateWithWhereUniqueNestedInput!]
  updateMany: [BlockUpdateManyWithWhereNestedInput!]
  deleteMany: [BlockScalarWhereInput!]
  upsert: [BlockUpsertWithWhereUniqueNestedInput!]
}

input BlockUpdateManyMutationInput {
  blockNumber: Int
  lastHash: String
  hash: String
  data: String
  nonce: Int
  difficulty: Int
}

input BlockUpdateManyWithWhereNestedInput {
  where: BlockScalarWhereInput!
  data: BlockUpdateManyDataInput!
}

input BlockUpdateWithWhereUniqueNestedInput {
  where: BlockWhereUniqueInput!
  data: BlockUpdateDataInput!
}

input BlockUpsertWithWhereUniqueNestedInput {
  where: BlockWhereUniqueInput!
  update: BlockUpdateDataInput!
  create: BlockCreateInput!
}

input BlockWhereInput {
  """Logical AND on all given filters."""
  AND: [BlockWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  blockNumber: Int

  """All values that are not equal to given value."""
  blockNumber_not: Int

  """All values that are contained in given list."""
  blockNumber_in: [Int!]

  """All values that are not contained in given list."""
  blockNumber_not_in: [Int!]

  """All values less than the given value."""
  blockNumber_lt: Int

  """All values less than or equal the given value."""
  blockNumber_lte: Int

  """All values greater than the given value."""
  blockNumber_gt: Int

  """All values greater than or equal the given value."""
  blockNumber_gte: Int
  timestamp: DateTime

  """All values that are not equal to given value."""
  timestamp_not: DateTime

  """All values that are contained in given list."""
  timestamp_in: [DateTime!]

  """All values that are not contained in given list."""
  timestamp_not_in: [DateTime!]

  """All values less than the given value."""
  timestamp_lt: DateTime

  """All values less than or equal the given value."""
  timestamp_lte: DateTime

  """All values greater than the given value."""
  timestamp_gt: DateTime

  """All values greater than or equal the given value."""
  timestamp_gte: DateTime
  lastHash: String

  """All values that are not equal to given value."""
  lastHash_not: String

  """All values that are contained in given list."""
  lastHash_in: [String!]

  """All values that are not contained in given list."""
  lastHash_not_in: [String!]

  """All values less than the given value."""
  lastHash_lt: String

  """All values less than or equal the given value."""
  lastHash_lte: String

  """All values greater than the given value."""
  lastHash_gt: String

  """All values greater than or equal the given value."""
  lastHash_gte: String

  """All values containing the given string."""
  lastHash_contains: String

  """All values not containing the given string."""
  lastHash_not_contains: String

  """All values starting with the given string."""
  lastHash_starts_with: String

  """All values not starting with the given string."""
  lastHash_not_starts_with: String

  """All values ending with the given string."""
  lastHash_ends_with: String

  """All values not ending with the given string."""
  lastHash_not_ends_with: String
  hash: String

  """All values that are not equal to given value."""
  hash_not: String

  """All values that are contained in given list."""
  hash_in: [String!]

  """All values that are not contained in given list."""
  hash_not_in: [String!]

  """All values less than the given value."""
  hash_lt: String

  """All values less than or equal the given value."""
  hash_lte: String

  """All values greater than the given value."""
  hash_gt: String

  """All values greater than or equal the given value."""
  hash_gte: String

  """All values containing the given string."""
  hash_contains: String

  """All values not containing the given string."""
  hash_not_contains: String

  """All values starting with the given string."""
  hash_starts_with: String

  """All values not starting with the given string."""
  hash_not_starts_with: String

  """All values ending with the given string."""
  hash_ends_with: String

  """All values not ending with the given string."""
  hash_not_ends_with: String
  data: String

  """All values that are not equal to given value."""
  data_not: String

  """All values that are contained in given list."""
  data_in: [String!]

  """All values that are not contained in given list."""
  data_not_in: [String!]

  """All values less than the given value."""
  data_lt: String

  """All values less than or equal the given value."""
  data_lte: String

  """All values greater than the given value."""
  data_gt: String

  """All values greater than or equal the given value."""
  data_gte: String

  """All values containing the given string."""
  data_contains: String

  """All values not containing the given string."""
  data_not_contains: String

  """All values starting with the given string."""
  data_starts_with: String

  """All values not starting with the given string."""
  data_not_starts_with: String

  """All values ending with the given string."""
  data_ends_with: String

  """All values not ending with the given string."""
  data_not_ends_with: String
  nonce: Int

  """All values that are not equal to given value."""
  nonce_not: Int

  """All values that are contained in given list."""
  nonce_in: [Int!]

  """All values that are not contained in given list."""
  nonce_not_in: [Int!]

  """All values less than the given value."""
  nonce_lt: Int

  """All values less than or equal the given value."""
  nonce_lte: Int

  """All values greater than the given value."""
  nonce_gt: Int

  """All values greater than or equal the given value."""
  nonce_gte: Int
  difficulty: Int

  """All values that are not equal to given value."""
  difficulty_not: Int

  """All values that are contained in given list."""
  difficulty_in: [Int!]

  """All values that are not contained in given list."""
  difficulty_not_in: [Int!]

  """All values less than the given value."""
  difficulty_lt: Int

  """All values less than or equal the given value."""
  difficulty_lte: Int

  """All values greater than the given value."""
  difficulty_gt: Int

  """All values greater than or equal the given value."""
  difficulty_gte: Int
}

input BlockWhereUniqueInput {
  id: ID
  lastHash: String
  hash: String
}

type CareProvider implements Node {
  id: ID!
  patient: Patient!
  cpId: String!
  cpaddress: String!
  city: String!
  pincode: Region!
  country: Country!
  contact: String!
  email: String!
}

"""A connection to a list of items."""
type CareProviderConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CareProviderEdge]!
  aggregate: AggregateCareProvider!
}

input CareProviderCreateInput {
  id: ID
  cpId: String!
  cpaddress: String!
  city: String!
  contact: String!
  email: String!
  patient: PatientCreateOneWithoutCpIdInput!
  pincode: RegionCreateOneInput!
  country: CountryCreateOneInput!
}

input CareProviderCreateOneWithoutPatientInput {
  create: CareProviderCreateWithoutPatientInput
  connect: CareProviderWhereUniqueInput
}

input CareProviderCreateWithoutPatientInput {
  id: ID
  cpId: String!
  cpaddress: String!
  city: String!
  contact: String!
  email: String!
  pincode: RegionCreateOneInput!
  country: CountryCreateOneInput!
}

"""An edge in a connection."""
type CareProviderEdge {
  """The item at the end of the edge."""
  node: CareProvider!

  """A cursor for use in pagination."""
  cursor: String!
}

enum CareProviderOrderByInput {
  id_ASC
  id_DESC
  cpId_ASC
  cpId_DESC
  cpaddress_ASC
  cpaddress_DESC
  city_ASC
  city_DESC
  contact_ASC
  contact_DESC
  email_ASC
  email_DESC
}

type CareProviderPreviousValues {
  id: ID!
  cpId: String!
  cpaddress: String!
  city: String!
  contact: String!
  email: String!
}

type CareProviderSubscriptionPayload {
  mutation: MutationType!
  node: CareProvider
  updatedFields: [String!]
  previousValues: CareProviderPreviousValues
}

input CareProviderSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CareProviderSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CareProviderWhereInput
}

input CareProviderUpdateInput {
  cpId: String
  cpaddress: String
  city: String
  contact: String
  email: String
  patient: PatientUpdateOneRequiredWithoutCpIdInput
  pincode: RegionUpdateOneRequiredInput
  country: CountryUpdateOneRequiredInput
}

input CareProviderUpdateManyMutationInput {
  cpId: String
  cpaddress: String
  city: String
  contact: String
  email: String
}

input CareProviderUpdateOneWithoutPatientInput {
  create: CareProviderCreateWithoutPatientInput
  connect: CareProviderWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: CareProviderUpdateWithoutPatientDataInput
  upsert: CareProviderUpsertWithoutPatientInput
}

input CareProviderUpdateWithoutPatientDataInput {
  cpId: String
  cpaddress: String
  city: String
  contact: String
  email: String
  pincode: RegionUpdateOneRequiredInput
  country: CountryUpdateOneRequiredInput
}

input CareProviderUpsertWithoutPatientInput {
  update: CareProviderUpdateWithoutPatientDataInput!
  create: CareProviderCreateWithoutPatientInput!
}

input CareProviderWhereInput {
  """Logical AND on all given filters."""
  AND: [CareProviderWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  cpId: String

  """All values that are not equal to given value."""
  cpId_not: String

  """All values that are contained in given list."""
  cpId_in: [String!]

  """All values that are not contained in given list."""
  cpId_not_in: [String!]

  """All values less than the given value."""
  cpId_lt: String

  """All values less than or equal the given value."""
  cpId_lte: String

  """All values greater than the given value."""
  cpId_gt: String

  """All values greater than or equal the given value."""
  cpId_gte: String

  """All values containing the given string."""
  cpId_contains: String

  """All values not containing the given string."""
  cpId_not_contains: String

  """All values starting with the given string."""
  cpId_starts_with: String

  """All values not starting with the given string."""
  cpId_not_starts_with: String

  """All values ending with the given string."""
  cpId_ends_with: String

  """All values not ending with the given string."""
  cpId_not_ends_with: String
  cpaddress: String

  """All values that are not equal to given value."""
  cpaddress_not: String

  """All values that are contained in given list."""
  cpaddress_in: [String!]

  """All values that are not contained in given list."""
  cpaddress_not_in: [String!]

  """All values less than the given value."""
  cpaddress_lt: String

  """All values less than or equal the given value."""
  cpaddress_lte: String

  """All values greater than the given value."""
  cpaddress_gt: String

  """All values greater than or equal the given value."""
  cpaddress_gte: String

  """All values containing the given string."""
  cpaddress_contains: String

  """All values not containing the given string."""
  cpaddress_not_contains: String

  """All values starting with the given string."""
  cpaddress_starts_with: String

  """All values not starting with the given string."""
  cpaddress_not_starts_with: String

  """All values ending with the given string."""
  cpaddress_ends_with: String

  """All values not ending with the given string."""
  cpaddress_not_ends_with: String
  city: String

  """All values that are not equal to given value."""
  city_not: String

  """All values that are contained in given list."""
  city_in: [String!]

  """All values that are not contained in given list."""
  city_not_in: [String!]

  """All values less than the given value."""
  city_lt: String

  """All values less than or equal the given value."""
  city_lte: String

  """All values greater than the given value."""
  city_gt: String

  """All values greater than or equal the given value."""
  city_gte: String

  """All values containing the given string."""
  city_contains: String

  """All values not containing the given string."""
  city_not_contains: String

  """All values starting with the given string."""
  city_starts_with: String

  """All values not starting with the given string."""
  city_not_starts_with: String

  """All values ending with the given string."""
  city_ends_with: String

  """All values not ending with the given string."""
  city_not_ends_with: String
  contact: String

  """All values that are not equal to given value."""
  contact_not: String

  """All values that are contained in given list."""
  contact_in: [String!]

  """All values that are not contained in given list."""
  contact_not_in: [String!]

  """All values less than the given value."""
  contact_lt: String

  """All values less than or equal the given value."""
  contact_lte: String

  """All values greater than the given value."""
  contact_gt: String

  """All values greater than or equal the given value."""
  contact_gte: String

  """All values containing the given string."""
  contact_contains: String

  """All values not containing the given string."""
  contact_not_contains: String

  """All values starting with the given string."""
  contact_starts_with: String

  """All values not starting with the given string."""
  contact_not_starts_with: String

  """All values ending with the given string."""
  contact_ends_with: String

  """All values not ending with the given string."""
  contact_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  patient: PatientWhereInput
  pincode: RegionWhereInput
  country: CountryWhereInput
}

input CareProviderWhereUniqueInput {
  id: ID
  cpId: String
  email: String
}

type Country implements Node {
  id: ID!
  countryCode: Int!
  countryName: String!
}

"""A connection to a list of items."""
type CountryConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CountryEdge]!
  aggregate: AggregateCountry!
}

input CountryCreateInput {
  id: ID
  countryCode: Int!
  countryName: String!
}

input CountryCreateOneInput {
  create: CountryCreateInput
  connect: CountryWhereUniqueInput
}

"""An edge in a connection."""
type CountryEdge {
  """The item at the end of the edge."""
  node: Country!

  """A cursor for use in pagination."""
  cursor: String!
}

enum CountryOrderByInput {
  id_ASC
  id_DESC
  countryCode_ASC
  countryCode_DESC
  countryName_ASC
  countryName_DESC
}

type CountryPreviousValues {
  id: ID!
  countryCode: Int!
  countryName: String!
}

type CountrySubscriptionPayload {
  mutation: MutationType!
  node: Country
  updatedFields: [String!]
  previousValues: CountryPreviousValues
}

input CountrySubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CountrySubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CountryWhereInput
}

input CountryUpdateDataInput {
  countryCode: Int
  countryName: String
}

input CountryUpdateInput {
  countryCode: Int
  countryName: String
}

input CountryUpdateManyMutationInput {
  countryCode: Int
  countryName: String
}

input CountryUpdateOneRequiredInput {
  create: CountryCreateInput
  connect: CountryWhereUniqueInput
  update: CountryUpdateDataInput
  upsert: CountryUpsertNestedInput
}

input CountryUpsertNestedInput {
  update: CountryUpdateDataInput!
  create: CountryCreateInput!
}

input CountryWhereInput {
  """Logical AND on all given filters."""
  AND: [CountryWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  countryCode: Int

  """All values that are not equal to given value."""
  countryCode_not: Int

  """All values that are contained in given list."""
  countryCode_in: [Int!]

  """All values that are not contained in given list."""
  countryCode_not_in: [Int!]

  """All values less than the given value."""
  countryCode_lt: Int

  """All values less than or equal the given value."""
  countryCode_lte: Int

  """All values greater than the given value."""
  countryCode_gt: Int

  """All values greater than or equal the given value."""
  countryCode_gte: Int
  countryName: String

  """All values that are not equal to given value."""
  countryName_not: String

  """All values that are contained in given list."""
  countryName_in: [String!]

  """All values that are not contained in given list."""
  countryName_not_in: [String!]

  """All values less than the given value."""
  countryName_lt: String

  """All values less than or equal the given value."""
  countryName_lte: String

  """All values greater than the given value."""
  countryName_gt: String

  """All values greater than or equal the given value."""
  countryName_gte: String

  """All values containing the given string."""
  countryName_contains: String

  """All values not containing the given string."""
  countryName_not_contains: String

  """All values starting with the given string."""
  countryName_starts_with: String

  """All values not starting with the given string."""
  countryName_not_starts_with: String

  """All values ending with the given string."""
  countryName_ends_with: String

  """All values not ending with the given string."""
  countryName_not_ends_with: String
}

input CountryWhereUniqueInput {
  id: ID
  countryCode: Int
}

type DatabaseAdmin implements Node {
  id: ID!
  user: User!
  contact: String!
  address: String!
  country: Country!
  hospital: Hospital!
  registeredAt: DateTime!
}

"""A connection to a list of items."""
type DatabaseAdminConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [DatabaseAdminEdge]!
  aggregate: AggregateDatabaseAdmin!
}

input DatabaseAdminCreateInput {
  id: ID
  contact: String!
  address: String!
  user: UserCreateOneInput!
  country: CountryCreateOneInput!
  hospital: HospitalCreateOneInput!
}

"""An edge in a connection."""
type DatabaseAdminEdge {
  """The item at the end of the edge."""
  node: DatabaseAdmin!

  """A cursor for use in pagination."""
  cursor: String!
}

enum DatabaseAdminOrderByInput {
  id_ASC
  id_DESC
  contact_ASC
  contact_DESC
  address_ASC
  address_DESC
  registeredAt_ASC
  registeredAt_DESC
}

type DatabaseAdminPreviousValues {
  id: ID!
  contact: String!
  address: String!
  registeredAt: DateTime!
}

type DatabaseAdminSubscriptionPayload {
  mutation: MutationType!
  node: DatabaseAdmin
  updatedFields: [String!]
  previousValues: DatabaseAdminPreviousValues
}

input DatabaseAdminSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [DatabaseAdminSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: DatabaseAdminWhereInput
}

input DatabaseAdminUpdateInput {
  contact: String
  address: String
  user: UserUpdateOneRequiredInput
  country: CountryUpdateOneRequiredInput
  hospital: HospitalUpdateOneRequiredInput
}

input DatabaseAdminUpdateManyMutationInput {
  contact: String
  address: String
}

input DatabaseAdminWhereInput {
  """Logical AND on all given filters."""
  AND: [DatabaseAdminWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  contact: String

  """All values that are not equal to given value."""
  contact_not: String

  """All values that are contained in given list."""
  contact_in: [String!]

  """All values that are not contained in given list."""
  contact_not_in: [String!]

  """All values less than the given value."""
  contact_lt: String

  """All values less than or equal the given value."""
  contact_lte: String

  """All values greater than the given value."""
  contact_gt: String

  """All values greater than or equal the given value."""
  contact_gte: String

  """All values containing the given string."""
  contact_contains: String

  """All values not containing the given string."""
  contact_not_contains: String

  """All values starting with the given string."""
  contact_starts_with: String

  """All values not starting with the given string."""
  contact_not_starts_with: String

  """All values ending with the given string."""
  contact_ends_with: String

  """All values not ending with the given string."""
  contact_not_ends_with: String
  address: String

  """All values that are not equal to given value."""
  address_not: String

  """All values that are contained in given list."""
  address_in: [String!]

  """All values that are not contained in given list."""
  address_not_in: [String!]

  """All values less than the given value."""
  address_lt: String

  """All values less than or equal the given value."""
  address_lte: String

  """All values greater than the given value."""
  address_gt: String

  """All values greater than or equal the given value."""
  address_gte: String

  """All values containing the given string."""
  address_contains: String

  """All values not containing the given string."""
  address_not_contains: String

  """All values starting with the given string."""
  address_starts_with: String

  """All values not starting with the given string."""
  address_not_starts_with: String

  """All values ending with the given string."""
  address_ends_with: String

  """All values not ending with the given string."""
  address_not_ends_with: String
  registeredAt: DateTime

  """All values that are not equal to given value."""
  registeredAt_not: DateTime

  """All values that are contained in given list."""
  registeredAt_in: [DateTime!]

  """All values that are not contained in given list."""
  registeredAt_not_in: [DateTime!]

  """All values less than the given value."""
  registeredAt_lt: DateTime

  """All values less than or equal the given value."""
  registeredAt_lte: DateTime

  """All values greater than the given value."""
  registeredAt_gt: DateTime

  """All values greater than or equal the given value."""
  registeredAt_gte: DateTime
  user: UserWhereInput
  country: CountryWhereInput
  hospital: HospitalWhereInput
}

input DatabaseAdminWhereUniqueInput {
  id: ID
}

scalar DateTime

enum DiagnosisType {
  Provisional
  Final
  Interim
}

enum Gender {
  Male
  Female
  Transgender
}

type Hospital implements Node {
  id: ID!
  hospitalId: String!
  name: String!
  address: String!
  district: String!
  pincode: Region!
  country: Country!
}

"""A connection to a list of items."""
type HospitalConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [HospitalEdge]!
  aggregate: AggregateHospital!
}

input HospitalCreateInput {
  id: ID
  hospitalId: String!
  name: String!
  address: String!
  district: String!
  pincode: RegionCreateOneInput!
  country: CountryCreateOneInput!
}

input HospitalCreateOneInput {
  create: HospitalCreateInput
  connect: HospitalWhereUniqueInput
}

"""An edge in a connection."""
type HospitalEdge {
  """The item at the end of the edge."""
  node: Hospital!

  """A cursor for use in pagination."""
  cursor: String!
}

enum HospitalOrderByInput {
  id_ASC
  id_DESC
  hospitalId_ASC
  hospitalId_DESC
  name_ASC
  name_DESC
  address_ASC
  address_DESC
  district_ASC
  district_DESC
}

type HospitalPreviousValues {
  id: ID!
  hospitalId: String!
  name: String!
  address: String!
  district: String!
}

type HospitalSubscriptionPayload {
  mutation: MutationType!
  node: Hospital
  updatedFields: [String!]
  previousValues: HospitalPreviousValues
}

input HospitalSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [HospitalSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: HospitalWhereInput
}

input HospitalUpdateDataInput {
  hospitalId: String
  name: String
  address: String
  district: String
  pincode: RegionUpdateOneRequiredInput
  country: CountryUpdateOneRequiredInput
}

input HospitalUpdateInput {
  hospitalId: String
  name: String
  address: String
  district: String
  pincode: RegionUpdateOneRequiredInput
  country: CountryUpdateOneRequiredInput
}

input HospitalUpdateManyMutationInput {
  hospitalId: String
  name: String
  address: String
  district: String
}

input HospitalUpdateOneRequiredInput {
  create: HospitalCreateInput
  connect: HospitalWhereUniqueInput
  update: HospitalUpdateDataInput
  upsert: HospitalUpsertNestedInput
}

input HospitalUpsertNestedInput {
  update: HospitalUpdateDataInput!
  create: HospitalCreateInput!
}

input HospitalWhereInput {
  """Logical AND on all given filters."""
  AND: [HospitalWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  hospitalId: String

  """All values that are not equal to given value."""
  hospitalId_not: String

  """All values that are contained in given list."""
  hospitalId_in: [String!]

  """All values that are not contained in given list."""
  hospitalId_not_in: [String!]

  """All values less than the given value."""
  hospitalId_lt: String

  """All values less than or equal the given value."""
  hospitalId_lte: String

  """All values greater than the given value."""
  hospitalId_gt: String

  """All values greater than or equal the given value."""
  hospitalId_gte: String

  """All values containing the given string."""
  hospitalId_contains: String

  """All values not containing the given string."""
  hospitalId_not_contains: String

  """All values starting with the given string."""
  hospitalId_starts_with: String

  """All values not starting with the given string."""
  hospitalId_not_starts_with: String

  """All values ending with the given string."""
  hospitalId_ends_with: String

  """All values not ending with the given string."""
  hospitalId_not_ends_with: String
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  address: String

  """All values that are not equal to given value."""
  address_not: String

  """All values that are contained in given list."""
  address_in: [String!]

  """All values that are not contained in given list."""
  address_not_in: [String!]

  """All values less than the given value."""
  address_lt: String

  """All values less than or equal the given value."""
  address_lte: String

  """All values greater than the given value."""
  address_gt: String

  """All values greater than or equal the given value."""
  address_gte: String

  """All values containing the given string."""
  address_contains: String

  """All values not containing the given string."""
  address_not_contains: String

  """All values starting with the given string."""
  address_starts_with: String

  """All values not starting with the given string."""
  address_not_starts_with: String

  """All values ending with the given string."""
  address_ends_with: String

  """All values not ending with the given string."""
  address_not_ends_with: String
  district: String

  """All values that are not equal to given value."""
  district_not: String

  """All values that are contained in given list."""
  district_in: [String!]

  """All values that are not contained in given list."""
  district_not_in: [String!]

  """All values less than the given value."""
  district_lt: String

  """All values less than or equal the given value."""
  district_lte: String

  """All values greater than the given value."""
  district_gt: String

  """All values greater than or equal the given value."""
  district_gte: String

  """All values containing the given string."""
  district_contains: String

  """All values not containing the given string."""
  district_not_contains: String

  """All values starting with the given string."""
  district_starts_with: String

  """All values not starting with the given string."""
  district_not_starts_with: String

  """All values ending with the given string."""
  district_ends_with: String

  """All values not ending with the given string."""
  district_not_ends_with: String
  pincode: RegionWhereInput
  country: CountryWhereInput
}

input HospitalWhereUniqueInput {
  id: ID
  hospitalId: String
}

type ICDCode implements Node {
  id: ID!
  icdCode: String!
  commonName: String!
  icdSubCodes(where: ICDSubCodeWhereInput, orderBy: ICDSubCodeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ICDSubCode!]
}

"""A connection to a list of items."""
type ICDCodeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ICDCodeEdge]!
  aggregate: AggregateICDCode!
}

input ICDCodeCreateInput {
  id: ID
  icdCode: String!
  commonName: String!
  icdSubCodes: ICDSubCodeCreateManyWithoutIcdCodeInput
}

input ICDCodeCreateOneInput {
  create: ICDCodeCreateInput
  connect: ICDCodeWhereUniqueInput
}

input ICDCodeCreateOneWithoutIcdSubCodesInput {
  create: ICDCodeCreateWithoutIcdSubCodesInput
  connect: ICDCodeWhereUniqueInput
}

input ICDCodeCreateWithoutIcdSubCodesInput {
  id: ID
  icdCode: String!
  commonName: String!
}

"""An edge in a connection."""
type ICDCodeEdge {
  """The item at the end of the edge."""
  node: ICDCode!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ICDCodeOrderByInput {
  id_ASC
  id_DESC
  icdCode_ASC
  icdCode_DESC
  commonName_ASC
  commonName_DESC
}

type ICDCodePreviousValues {
  id: ID!
  icdCode: String!
  commonName: String!
}

type ICDCodeSubscriptionPayload {
  mutation: MutationType!
  node: ICDCode
  updatedFields: [String!]
  previousValues: ICDCodePreviousValues
}

input ICDCodeSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ICDCodeSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ICDCodeWhereInput
}

input ICDCodeUpdateDataInput {
  icdCode: String
  commonName: String
  icdSubCodes: ICDSubCodeUpdateManyWithoutIcdCodeInput
}

input ICDCodeUpdateInput {
  icdCode: String
  commonName: String
  icdSubCodes: ICDSubCodeUpdateManyWithoutIcdCodeInput
}

input ICDCodeUpdateManyMutationInput {
  icdCode: String
  commonName: String
}

input ICDCodeUpdateOneRequiredInput {
  create: ICDCodeCreateInput
  connect: ICDCodeWhereUniqueInput
  update: ICDCodeUpdateDataInput
  upsert: ICDCodeUpsertNestedInput
}

input ICDCodeUpdateOneRequiredWithoutIcdSubCodesInput {
  create: ICDCodeCreateWithoutIcdSubCodesInput
  connect: ICDCodeWhereUniqueInput
  update: ICDCodeUpdateWithoutIcdSubCodesDataInput
  upsert: ICDCodeUpsertWithoutIcdSubCodesInput
}

input ICDCodeUpdateWithoutIcdSubCodesDataInput {
  icdCode: String
  commonName: String
}

input ICDCodeUpsertNestedInput {
  update: ICDCodeUpdateDataInput!
  create: ICDCodeCreateInput!
}

input ICDCodeUpsertWithoutIcdSubCodesInput {
  update: ICDCodeUpdateWithoutIcdSubCodesDataInput!
  create: ICDCodeCreateWithoutIcdSubCodesInput!
}

input ICDCodeWhereInput {
  """Logical AND on all given filters."""
  AND: [ICDCodeWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  icdCode: String

  """All values that are not equal to given value."""
  icdCode_not: String

  """All values that are contained in given list."""
  icdCode_in: [String!]

  """All values that are not contained in given list."""
  icdCode_not_in: [String!]

  """All values less than the given value."""
  icdCode_lt: String

  """All values less than or equal the given value."""
  icdCode_lte: String

  """All values greater than the given value."""
  icdCode_gt: String

  """All values greater than or equal the given value."""
  icdCode_gte: String

  """All values containing the given string."""
  icdCode_contains: String

  """All values not containing the given string."""
  icdCode_not_contains: String

  """All values starting with the given string."""
  icdCode_starts_with: String

  """All values not starting with the given string."""
  icdCode_not_starts_with: String

  """All values ending with the given string."""
  icdCode_ends_with: String

  """All values not ending with the given string."""
  icdCode_not_ends_with: String
  commonName: String

  """All values that are not equal to given value."""
  commonName_not: String

  """All values that are contained in given list."""
  commonName_in: [String!]

  """All values that are not contained in given list."""
  commonName_not_in: [String!]

  """All values less than the given value."""
  commonName_lt: String

  """All values less than or equal the given value."""
  commonName_lte: String

  """All values greater than the given value."""
  commonName_gt: String

  """All values greater than or equal the given value."""
  commonName_gte: String

  """All values containing the given string."""
  commonName_contains: String

  """All values not containing the given string."""
  commonName_not_contains: String

  """All values starting with the given string."""
  commonName_starts_with: String

  """All values not starting with the given string."""
  commonName_not_starts_with: String

  """All values ending with the given string."""
  commonName_ends_with: String

  """All values not ending with the given string."""
  commonName_not_ends_with: String
  icdSubCodes_some: ICDSubCodeWhereInput
}

input ICDCodeWhereUniqueInput {
  id: ID
  icdCode: String
}

type ICDSubCode implements Node {
  id: ID!
  icdSubCode: String!
  scientificName: String!
  icdCode: ICDCode!
}

"""A connection to a list of items."""
type ICDSubCodeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ICDSubCodeEdge]!
  aggregate: AggregateICDSubCode!
}

input ICDSubCodeCreateInput {
  id: ID
  icdSubCode: String!
  scientificName: String!
  icdCode: ICDCodeCreateOneWithoutIcdSubCodesInput!
}

input ICDSubCodeCreateManyWithoutIcdCodeInput {
  create: [ICDSubCodeCreateWithoutIcdCodeInput!]
  connect: [ICDSubCodeWhereUniqueInput!]
}

input ICDSubCodeCreateOneInput {
  create: ICDSubCodeCreateInput
  connect: ICDSubCodeWhereUniqueInput
}

input ICDSubCodeCreateWithoutIcdCodeInput {
  id: ID
  icdSubCode: String!
  scientificName: String!
}

"""An edge in a connection."""
type ICDSubCodeEdge {
  """The item at the end of the edge."""
  node: ICDSubCode!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ICDSubCodeOrderByInput {
  id_ASC
  id_DESC
  icdSubCode_ASC
  icdSubCode_DESC
  scientificName_ASC
  scientificName_DESC
}

type ICDSubCodePreviousValues {
  id: ID!
  icdSubCode: String!
  scientificName: String!
}

input ICDSubCodeScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [ICDSubCodeScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [ICDSubCodeScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ICDSubCodeScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  icdSubCode: String

  """All values that are not equal to given value."""
  icdSubCode_not: String

  """All values that are contained in given list."""
  icdSubCode_in: [String!]

  """All values that are not contained in given list."""
  icdSubCode_not_in: [String!]

  """All values less than the given value."""
  icdSubCode_lt: String

  """All values less than or equal the given value."""
  icdSubCode_lte: String

  """All values greater than the given value."""
  icdSubCode_gt: String

  """All values greater than or equal the given value."""
  icdSubCode_gte: String

  """All values containing the given string."""
  icdSubCode_contains: String

  """All values not containing the given string."""
  icdSubCode_not_contains: String

  """All values starting with the given string."""
  icdSubCode_starts_with: String

  """All values not starting with the given string."""
  icdSubCode_not_starts_with: String

  """All values ending with the given string."""
  icdSubCode_ends_with: String

  """All values not ending with the given string."""
  icdSubCode_not_ends_with: String
  scientificName: String

  """All values that are not equal to given value."""
  scientificName_not: String

  """All values that are contained in given list."""
  scientificName_in: [String!]

  """All values that are not contained in given list."""
  scientificName_not_in: [String!]

  """All values less than the given value."""
  scientificName_lt: String

  """All values less than or equal the given value."""
  scientificName_lte: String

  """All values greater than the given value."""
  scientificName_gt: String

  """All values greater than or equal the given value."""
  scientificName_gte: String

  """All values containing the given string."""
  scientificName_contains: String

  """All values not containing the given string."""
  scientificName_not_contains: String

  """All values starting with the given string."""
  scientificName_starts_with: String

  """All values not starting with the given string."""
  scientificName_not_starts_with: String

  """All values ending with the given string."""
  scientificName_ends_with: String

  """All values not ending with the given string."""
  scientificName_not_ends_with: String
}

type ICDSubCodeSubscriptionPayload {
  mutation: MutationType!
  node: ICDSubCode
  updatedFields: [String!]
  previousValues: ICDSubCodePreviousValues
}

input ICDSubCodeSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ICDSubCodeSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ICDSubCodeWhereInput
}

input ICDSubCodeUpdateDataInput {
  icdSubCode: String
  scientificName: String
  icdCode: ICDCodeUpdateOneRequiredWithoutIcdSubCodesInput
}

input ICDSubCodeUpdateInput {
  icdSubCode: String
  scientificName: String
  icdCode: ICDCodeUpdateOneRequiredWithoutIcdSubCodesInput
}

input ICDSubCodeUpdateManyDataInput {
  icdSubCode: String
  scientificName: String
}

input ICDSubCodeUpdateManyMutationInput {
  icdSubCode: String
  scientificName: String
}

input ICDSubCodeUpdateManyWithoutIcdCodeInput {
  create: [ICDSubCodeCreateWithoutIcdCodeInput!]
  connect: [ICDSubCodeWhereUniqueInput!]
  set: [ICDSubCodeWhereUniqueInput!]
  disconnect: [ICDSubCodeWhereUniqueInput!]
  delete: [ICDSubCodeWhereUniqueInput!]
  update: [ICDSubCodeUpdateWithWhereUniqueWithoutIcdCodeInput!]
  updateMany: [ICDSubCodeUpdateManyWithWhereNestedInput!]
  deleteMany: [ICDSubCodeScalarWhereInput!]
  upsert: [ICDSubCodeUpsertWithWhereUniqueWithoutIcdCodeInput!]
}

input ICDSubCodeUpdateManyWithWhereNestedInput {
  where: ICDSubCodeScalarWhereInput!
  data: ICDSubCodeUpdateManyDataInput!
}

input ICDSubCodeUpdateOneRequiredInput {
  create: ICDSubCodeCreateInput
  connect: ICDSubCodeWhereUniqueInput
  update: ICDSubCodeUpdateDataInput
  upsert: ICDSubCodeUpsertNestedInput
}

input ICDSubCodeUpdateWithoutIcdCodeDataInput {
  icdSubCode: String
  scientificName: String
}

input ICDSubCodeUpdateWithWhereUniqueWithoutIcdCodeInput {
  where: ICDSubCodeWhereUniqueInput!
  data: ICDSubCodeUpdateWithoutIcdCodeDataInput!
}

input ICDSubCodeUpsertNestedInput {
  update: ICDSubCodeUpdateDataInput!
  create: ICDSubCodeCreateInput!
}

input ICDSubCodeUpsertWithWhereUniqueWithoutIcdCodeInput {
  where: ICDSubCodeWhereUniqueInput!
  update: ICDSubCodeUpdateWithoutIcdCodeDataInput!
  create: ICDSubCodeCreateWithoutIcdCodeInput!
}

input ICDSubCodeWhereInput {
  """Logical AND on all given filters."""
  AND: [ICDSubCodeWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  icdSubCode: String

  """All values that are not equal to given value."""
  icdSubCode_not: String

  """All values that are contained in given list."""
  icdSubCode_in: [String!]

  """All values that are not contained in given list."""
  icdSubCode_not_in: [String!]

  """All values less than the given value."""
  icdSubCode_lt: String

  """All values less than or equal the given value."""
  icdSubCode_lte: String

  """All values greater than the given value."""
  icdSubCode_gt: String

  """All values greater than or equal the given value."""
  icdSubCode_gte: String

  """All values containing the given string."""
  icdSubCode_contains: String

  """All values not containing the given string."""
  icdSubCode_not_contains: String

  """All values starting with the given string."""
  icdSubCode_starts_with: String

  """All values not starting with the given string."""
  icdSubCode_not_starts_with: String

  """All values ending with the given string."""
  icdSubCode_ends_with: String

  """All values not ending with the given string."""
  icdSubCode_not_ends_with: String
  scientificName: String

  """All values that are not equal to given value."""
  scientificName_not: String

  """All values that are contained in given list."""
  scientificName_in: [String!]

  """All values that are not contained in given list."""
  scientificName_not_in: [String!]

  """All values less than the given value."""
  scientificName_lt: String

  """All values less than or equal the given value."""
  scientificName_lte: String

  """All values greater than the given value."""
  scientificName_gt: String

  """All values greater than or equal the given value."""
  scientificName_gte: String

  """All values containing the given string."""
  scientificName_contains: String

  """All values not containing the given string."""
  scientificName_not_contains: String

  """All values starting with the given string."""
  scientificName_starts_with: String

  """All values not starting with the given string."""
  scientificName_not_starts_with: String

  """All values ending with the given string."""
  scientificName_ends_with: String

  """All values not ending with the given string."""
  scientificName_not_ends_with: String
  icdCode: ICDCodeWhereInput
}

input ICDSubCodeWhereUniqueInput {
  id: ID
  icdSubCode: String
}

type Insurance implements Node {
  id: ID!
  patient: Patient!
  insuranceId: String!
  insuranceStatus: String!
  insuranceCompany1: String!
  insuranceCompany2: String!
  sponsorerDetails: String!
}

"""A connection to a list of items."""
type InsuranceConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [InsuranceEdge]!
  aggregate: AggregateInsurance!
}

input InsuranceCreateInput {
  id: ID
  insuranceId: String!
  insuranceStatus: String!
  insuranceCompany1: String!
  insuranceCompany2: String!
  sponsorerDetails: String!
  patient: PatientCreateOneWithoutInsuranceInput!
}

input InsuranceCreateOneWithoutPatientInput {
  create: InsuranceCreateWithoutPatientInput
  connect: InsuranceWhereUniqueInput
}

input InsuranceCreateWithoutPatientInput {
  id: ID
  insuranceId: String!
  insuranceStatus: String!
  insuranceCompany1: String!
  insuranceCompany2: String!
  sponsorerDetails: String!
}

"""An edge in a connection."""
type InsuranceEdge {
  """The item at the end of the edge."""
  node: Insurance!

  """A cursor for use in pagination."""
  cursor: String!
}

enum InsuranceOrderByInput {
  id_ASC
  id_DESC
  insuranceId_ASC
  insuranceId_DESC
  insuranceStatus_ASC
  insuranceStatus_DESC
  insuranceCompany1_ASC
  insuranceCompany1_DESC
  insuranceCompany2_ASC
  insuranceCompany2_DESC
  sponsorerDetails_ASC
  sponsorerDetails_DESC
}

type InsurancePreviousValues {
  id: ID!
  insuranceId: String!
  insuranceStatus: String!
  insuranceCompany1: String!
  insuranceCompany2: String!
  sponsorerDetails: String!
}

type InsuranceSubscriptionPayload {
  mutation: MutationType!
  node: Insurance
  updatedFields: [String!]
  previousValues: InsurancePreviousValues
}

input InsuranceSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [InsuranceSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: InsuranceWhereInput
}

input InsuranceUpdateInput {
  insuranceId: String
  insuranceStatus: String
  insuranceCompany1: String
  insuranceCompany2: String
  sponsorerDetails: String
  patient: PatientUpdateOneRequiredWithoutInsuranceInput
}

input InsuranceUpdateManyMutationInput {
  insuranceId: String
  insuranceStatus: String
  insuranceCompany1: String
  insuranceCompany2: String
  sponsorerDetails: String
}

input InsuranceUpdateOneWithoutPatientInput {
  create: InsuranceCreateWithoutPatientInput
  connect: InsuranceWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: InsuranceUpdateWithoutPatientDataInput
  upsert: InsuranceUpsertWithoutPatientInput
}

input InsuranceUpdateWithoutPatientDataInput {
  insuranceId: String
  insuranceStatus: String
  insuranceCompany1: String
  insuranceCompany2: String
  sponsorerDetails: String
}

input InsuranceUpsertWithoutPatientInput {
  update: InsuranceUpdateWithoutPatientDataInput!
  create: InsuranceCreateWithoutPatientInput!
}

input InsuranceWhereInput {
  """Logical AND on all given filters."""
  AND: [InsuranceWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  insuranceId: String

  """All values that are not equal to given value."""
  insuranceId_not: String

  """All values that are contained in given list."""
  insuranceId_in: [String!]

  """All values that are not contained in given list."""
  insuranceId_not_in: [String!]

  """All values less than the given value."""
  insuranceId_lt: String

  """All values less than or equal the given value."""
  insuranceId_lte: String

  """All values greater than the given value."""
  insuranceId_gt: String

  """All values greater than or equal the given value."""
  insuranceId_gte: String

  """All values containing the given string."""
  insuranceId_contains: String

  """All values not containing the given string."""
  insuranceId_not_contains: String

  """All values starting with the given string."""
  insuranceId_starts_with: String

  """All values not starting with the given string."""
  insuranceId_not_starts_with: String

  """All values ending with the given string."""
  insuranceId_ends_with: String

  """All values not ending with the given string."""
  insuranceId_not_ends_with: String
  insuranceStatus: String

  """All values that are not equal to given value."""
  insuranceStatus_not: String

  """All values that are contained in given list."""
  insuranceStatus_in: [String!]

  """All values that are not contained in given list."""
  insuranceStatus_not_in: [String!]

  """All values less than the given value."""
  insuranceStatus_lt: String

  """All values less than or equal the given value."""
  insuranceStatus_lte: String

  """All values greater than the given value."""
  insuranceStatus_gt: String

  """All values greater than or equal the given value."""
  insuranceStatus_gte: String

  """All values containing the given string."""
  insuranceStatus_contains: String

  """All values not containing the given string."""
  insuranceStatus_not_contains: String

  """All values starting with the given string."""
  insuranceStatus_starts_with: String

  """All values not starting with the given string."""
  insuranceStatus_not_starts_with: String

  """All values ending with the given string."""
  insuranceStatus_ends_with: String

  """All values not ending with the given string."""
  insuranceStatus_not_ends_with: String
  insuranceCompany1: String

  """All values that are not equal to given value."""
  insuranceCompany1_not: String

  """All values that are contained in given list."""
  insuranceCompany1_in: [String!]

  """All values that are not contained in given list."""
  insuranceCompany1_not_in: [String!]

  """All values less than the given value."""
  insuranceCompany1_lt: String

  """All values less than or equal the given value."""
  insuranceCompany1_lte: String

  """All values greater than the given value."""
  insuranceCompany1_gt: String

  """All values greater than or equal the given value."""
  insuranceCompany1_gte: String

  """All values containing the given string."""
  insuranceCompany1_contains: String

  """All values not containing the given string."""
  insuranceCompany1_not_contains: String

  """All values starting with the given string."""
  insuranceCompany1_starts_with: String

  """All values not starting with the given string."""
  insuranceCompany1_not_starts_with: String

  """All values ending with the given string."""
  insuranceCompany1_ends_with: String

  """All values not ending with the given string."""
  insuranceCompany1_not_ends_with: String
  insuranceCompany2: String

  """All values that are not equal to given value."""
  insuranceCompany2_not: String

  """All values that are contained in given list."""
  insuranceCompany2_in: [String!]

  """All values that are not contained in given list."""
  insuranceCompany2_not_in: [String!]

  """All values less than the given value."""
  insuranceCompany2_lt: String

  """All values less than or equal the given value."""
  insuranceCompany2_lte: String

  """All values greater than the given value."""
  insuranceCompany2_gt: String

  """All values greater than or equal the given value."""
  insuranceCompany2_gte: String

  """All values containing the given string."""
  insuranceCompany2_contains: String

  """All values not containing the given string."""
  insuranceCompany2_not_contains: String

  """All values starting with the given string."""
  insuranceCompany2_starts_with: String

  """All values not starting with the given string."""
  insuranceCompany2_not_starts_with: String

  """All values ending with the given string."""
  insuranceCompany2_ends_with: String

  """All values not ending with the given string."""
  insuranceCompany2_not_ends_with: String
  sponsorerDetails: String

  """All values that are not equal to given value."""
  sponsorerDetails_not: String

  """All values that are contained in given list."""
  sponsorerDetails_in: [String!]

  """All values that are not contained in given list."""
  sponsorerDetails_not_in: [String!]

  """All values less than the given value."""
  sponsorerDetails_lt: String

  """All values less than or equal the given value."""
  sponsorerDetails_lte: String

  """All values greater than the given value."""
  sponsorerDetails_gt: String

  """All values greater than or equal the given value."""
  sponsorerDetails_gte: String

  """All values containing the given string."""
  sponsorerDetails_contains: String

  """All values not containing the given string."""
  sponsorerDetails_not_contains: String

  """All values starting with the given string."""
  sponsorerDetails_starts_with: String

  """All values not starting with the given string."""
  sponsorerDetails_not_starts_with: String

  """All values ending with the given string."""
  sponsorerDetails_ends_with: String

  """All values not ending with the given string."""
  sponsorerDetails_not_ends_with: String
  patient: PatientWhereInput
}

input InsuranceWhereUniqueInput {
  id: ID
  insuranceId: String
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

enum MaritalStatus {
  Single
  Married
  Divorced
  Widowed
}

type MedicalPractitioner implements Node {
  id: ID!
  user: User!
  mpId: String!
  address: String!
  clinicAddress: String!
  degree: String!
  field: String!
  hospital: Hospital!
  registeredAt: DateTime!
}

"""A connection to a list of items."""
type MedicalPractitionerConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [MedicalPractitionerEdge]!
  aggregate: AggregateMedicalPractitioner!
}

input MedicalPractitionerCreateInput {
  id: ID
  mpId: String!
  address: String!
  clinicAddress: String!
  degree: String!
  field: String!
  user: UserCreateOneInput!
  hospital: HospitalCreateOneInput!
}

input MedicalPractitionerCreateOneInput {
  create: MedicalPractitionerCreateInput
  connect: MedicalPractitionerWhereUniqueInput
}

"""An edge in a connection."""
type MedicalPractitionerEdge {
  """The item at the end of the edge."""
  node: MedicalPractitioner!

  """A cursor for use in pagination."""
  cursor: String!
}

enum MedicalPractitionerOrderByInput {
  id_ASC
  id_DESC
  mpId_ASC
  mpId_DESC
  address_ASC
  address_DESC
  clinicAddress_ASC
  clinicAddress_DESC
  degree_ASC
  degree_DESC
  field_ASC
  field_DESC
  registeredAt_ASC
  registeredAt_DESC
}

type MedicalPractitionerPreviousValues {
  id: ID!
  mpId: String!
  address: String!
  clinicAddress: String!
  degree: String!
  field: String!
  registeredAt: DateTime!
}

type MedicalPractitionerSubscriptionPayload {
  mutation: MutationType!
  node: MedicalPractitioner
  updatedFields: [String!]
  previousValues: MedicalPractitionerPreviousValues
}

input MedicalPractitionerSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [MedicalPractitionerSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: MedicalPractitionerWhereInput
}

input MedicalPractitionerUpdateDataInput {
  mpId: String
  address: String
  clinicAddress: String
  degree: String
  field: String
  user: UserUpdateOneRequiredInput
  hospital: HospitalUpdateOneRequiredInput
}

input MedicalPractitionerUpdateInput {
  mpId: String
  address: String
  clinicAddress: String
  degree: String
  field: String
  user: UserUpdateOneRequiredInput
  hospital: HospitalUpdateOneRequiredInput
}

input MedicalPractitionerUpdateManyMutationInput {
  mpId: String
  address: String
  clinicAddress: String
  degree: String
  field: String
}

input MedicalPractitionerUpdateOneRequiredInput {
  create: MedicalPractitionerCreateInput
  connect: MedicalPractitionerWhereUniqueInput
  update: MedicalPractitionerUpdateDataInput
  upsert: MedicalPractitionerUpsertNestedInput
}

input MedicalPractitionerUpsertNestedInput {
  update: MedicalPractitionerUpdateDataInput!
  create: MedicalPractitionerCreateInput!
}

input MedicalPractitionerWhereInput {
  """Logical AND on all given filters."""
  AND: [MedicalPractitionerWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  mpId: String

  """All values that are not equal to given value."""
  mpId_not: String

  """All values that are contained in given list."""
  mpId_in: [String!]

  """All values that are not contained in given list."""
  mpId_not_in: [String!]

  """All values less than the given value."""
  mpId_lt: String

  """All values less than or equal the given value."""
  mpId_lte: String

  """All values greater than the given value."""
  mpId_gt: String

  """All values greater than or equal the given value."""
  mpId_gte: String

  """All values containing the given string."""
  mpId_contains: String

  """All values not containing the given string."""
  mpId_not_contains: String

  """All values starting with the given string."""
  mpId_starts_with: String

  """All values not starting with the given string."""
  mpId_not_starts_with: String

  """All values ending with the given string."""
  mpId_ends_with: String

  """All values not ending with the given string."""
  mpId_not_ends_with: String
  address: String

  """All values that are not equal to given value."""
  address_not: String

  """All values that are contained in given list."""
  address_in: [String!]

  """All values that are not contained in given list."""
  address_not_in: [String!]

  """All values less than the given value."""
  address_lt: String

  """All values less than or equal the given value."""
  address_lte: String

  """All values greater than the given value."""
  address_gt: String

  """All values greater than or equal the given value."""
  address_gte: String

  """All values containing the given string."""
  address_contains: String

  """All values not containing the given string."""
  address_not_contains: String

  """All values starting with the given string."""
  address_starts_with: String

  """All values not starting with the given string."""
  address_not_starts_with: String

  """All values ending with the given string."""
  address_ends_with: String

  """All values not ending with the given string."""
  address_not_ends_with: String
  clinicAddress: String

  """All values that are not equal to given value."""
  clinicAddress_not: String

  """All values that are contained in given list."""
  clinicAddress_in: [String!]

  """All values that are not contained in given list."""
  clinicAddress_not_in: [String!]

  """All values less than the given value."""
  clinicAddress_lt: String

  """All values less than or equal the given value."""
  clinicAddress_lte: String

  """All values greater than the given value."""
  clinicAddress_gt: String

  """All values greater than or equal the given value."""
  clinicAddress_gte: String

  """All values containing the given string."""
  clinicAddress_contains: String

  """All values not containing the given string."""
  clinicAddress_not_contains: String

  """All values starting with the given string."""
  clinicAddress_starts_with: String

  """All values not starting with the given string."""
  clinicAddress_not_starts_with: String

  """All values ending with the given string."""
  clinicAddress_ends_with: String

  """All values not ending with the given string."""
  clinicAddress_not_ends_with: String
  degree: String

  """All values that are not equal to given value."""
  degree_not: String

  """All values that are contained in given list."""
  degree_in: [String!]

  """All values that are not contained in given list."""
  degree_not_in: [String!]

  """All values less than the given value."""
  degree_lt: String

  """All values less than or equal the given value."""
  degree_lte: String

  """All values greater than the given value."""
  degree_gt: String

  """All values greater than or equal the given value."""
  degree_gte: String

  """All values containing the given string."""
  degree_contains: String

  """All values not containing the given string."""
  degree_not_contains: String

  """All values starting with the given string."""
  degree_starts_with: String

  """All values not starting with the given string."""
  degree_not_starts_with: String

  """All values ending with the given string."""
  degree_ends_with: String

  """All values not ending with the given string."""
  degree_not_ends_with: String
  field: String

  """All values that are not equal to given value."""
  field_not: String

  """All values that are contained in given list."""
  field_in: [String!]

  """All values that are not contained in given list."""
  field_not_in: [String!]

  """All values less than the given value."""
  field_lt: String

  """All values less than or equal the given value."""
  field_lte: String

  """All values greater than the given value."""
  field_gt: String

  """All values greater than or equal the given value."""
  field_gte: String

  """All values containing the given string."""
  field_contains: String

  """All values not containing the given string."""
  field_not_contains: String

  """All values starting with the given string."""
  field_starts_with: String

  """All values not starting with the given string."""
  field_not_starts_with: String

  """All values ending with the given string."""
  field_ends_with: String

  """All values not ending with the given string."""
  field_not_ends_with: String
  registeredAt: DateTime

  """All values that are not equal to given value."""
  registeredAt_not: DateTime

  """All values that are contained in given list."""
  registeredAt_in: [DateTime!]

  """All values that are not contained in given list."""
  registeredAt_not_in: [DateTime!]

  """All values less than the given value."""
  registeredAt_lt: DateTime

  """All values less than or equal the given value."""
  registeredAt_lte: DateTime

  """All values greater than the given value."""
  registeredAt_gt: DateTime

  """All values greater than or equal the given value."""
  registeredAt_gte: DateTime
  user: UserWhereInput
  hospital: HospitalWhereInput
}

input MedicalPractitionerWhereUniqueInput {
  id: ID
  mpId: String
}

type Mutation {
  createBlockChain(data: BlockChainCreateInput!): BlockChain!
  createDatabaseAdmin(data: DatabaseAdminCreateInput!): DatabaseAdmin!
  createCareProvider(data: CareProviderCreateInput!): CareProvider!
  createInsurance(data: InsuranceCreateInput!): Insurance!
  createPatientCase(data: PatientCaseCreateInput!): PatientCase!
  createPatientRecord(data: PatientRecordCreateInput!): PatientRecord!
  createSharedCase(data: SharedCaseCreateInput!): SharedCase!
  createSharedRecord(data: SharedRecordCreateInput!): SharedRecord!
  createPatient(data: PatientCreateInput!): Patient!
  createCountry(data: CountryCreateInput!): Country!
  createICDSubCode(data: ICDSubCodeCreateInput!): ICDSubCode!
  createRegion(data: RegionCreateInput!): Region!
  createMedicalPractitioner(data: MedicalPractitionerCreateInput!): MedicalPractitioner!
  createHospital(data: HospitalCreateInput!): Hospital!
  createUser(data: UserCreateInput!): User!
  createICDCode(data: ICDCodeCreateInput!): ICDCode!
  createBlock(data: BlockCreateInput!): Block!
  updateBlockChain(data: BlockChainUpdateInput!, where: BlockChainWhereUniqueInput!): BlockChain
  updateDatabaseAdmin(data: DatabaseAdminUpdateInput!, where: DatabaseAdminWhereUniqueInput!): DatabaseAdmin
  updateCareProvider(data: CareProviderUpdateInput!, where: CareProviderWhereUniqueInput!): CareProvider
  updateInsurance(data: InsuranceUpdateInput!, where: InsuranceWhereUniqueInput!): Insurance
  updatePatientCase(data: PatientCaseUpdateInput!, where: PatientCaseWhereUniqueInput!): PatientCase
  updatePatientRecord(data: PatientRecordUpdateInput!, where: PatientRecordWhereUniqueInput!): PatientRecord
  updateSharedCase(data: SharedCaseUpdateInput!, where: SharedCaseWhereUniqueInput!): SharedCase
  updateSharedRecord(data: SharedRecordUpdateInput!, where: SharedRecordWhereUniqueInput!): SharedRecord
  updatePatient(data: PatientUpdateInput!, where: PatientWhereUniqueInput!): Patient
  updateCountry(data: CountryUpdateInput!, where: CountryWhereUniqueInput!): Country
  updateICDSubCode(data: ICDSubCodeUpdateInput!, where: ICDSubCodeWhereUniqueInput!): ICDSubCode
  updateRegion(data: RegionUpdateInput!, where: RegionWhereUniqueInput!): Region
  updateMedicalPractitioner(data: MedicalPractitionerUpdateInput!, where: MedicalPractitionerWhereUniqueInput!): MedicalPractitioner
  updateHospital(data: HospitalUpdateInput!, where: HospitalWhereUniqueInput!): Hospital
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateICDCode(data: ICDCodeUpdateInput!, where: ICDCodeWhereUniqueInput!): ICDCode
  updateBlock(data: BlockUpdateInput!, where: BlockWhereUniqueInput!): Block
  deleteBlockChain(where: BlockChainWhereUniqueInput!): BlockChain
  deleteDatabaseAdmin(where: DatabaseAdminWhereUniqueInput!): DatabaseAdmin
  deleteCareProvider(where: CareProviderWhereUniqueInput!): CareProvider
  deleteInsurance(where: InsuranceWhereUniqueInput!): Insurance
  deletePatientCase(where: PatientCaseWhereUniqueInput!): PatientCase
  deletePatientRecord(where: PatientRecordWhereUniqueInput!): PatientRecord
  deleteSharedCase(where: SharedCaseWhereUniqueInput!): SharedCase
  deleteSharedRecord(where: SharedRecordWhereUniqueInput!): SharedRecord
  deletePatient(where: PatientWhereUniqueInput!): Patient
  deleteCountry(where: CountryWhereUniqueInput!): Country
  deleteICDSubCode(where: ICDSubCodeWhereUniqueInput!): ICDSubCode
  deleteRegion(where: RegionWhereUniqueInput!): Region
  deleteMedicalPractitioner(where: MedicalPractitionerWhereUniqueInput!): MedicalPractitioner
  deleteHospital(where: HospitalWhereUniqueInput!): Hospital
  deleteUser(where: UserWhereUniqueInput!): User
  deleteICDCode(where: ICDCodeWhereUniqueInput!): ICDCode
  deleteBlock(where: BlockWhereUniqueInput!): Block
  upsertBlockChain(where: BlockChainWhereUniqueInput!, create: BlockChainCreateInput!, update: BlockChainUpdateInput!): BlockChain!
  upsertDatabaseAdmin(where: DatabaseAdminWhereUniqueInput!, create: DatabaseAdminCreateInput!, update: DatabaseAdminUpdateInput!): DatabaseAdmin!
  upsertCareProvider(where: CareProviderWhereUniqueInput!, create: CareProviderCreateInput!, update: CareProviderUpdateInput!): CareProvider!
  upsertInsurance(where: InsuranceWhereUniqueInput!, create: InsuranceCreateInput!, update: InsuranceUpdateInput!): Insurance!
  upsertPatientCase(where: PatientCaseWhereUniqueInput!, create: PatientCaseCreateInput!, update: PatientCaseUpdateInput!): PatientCase!
  upsertPatientRecord(where: PatientRecordWhereUniqueInput!, create: PatientRecordCreateInput!, update: PatientRecordUpdateInput!): PatientRecord!
  upsertSharedCase(where: SharedCaseWhereUniqueInput!, create: SharedCaseCreateInput!, update: SharedCaseUpdateInput!): SharedCase!
  upsertSharedRecord(where: SharedRecordWhereUniqueInput!, create: SharedRecordCreateInput!, update: SharedRecordUpdateInput!): SharedRecord!
  upsertPatient(where: PatientWhereUniqueInput!, create: PatientCreateInput!, update: PatientUpdateInput!): Patient!
  upsertCountry(where: CountryWhereUniqueInput!, create: CountryCreateInput!, update: CountryUpdateInput!): Country!
  upsertICDSubCode(where: ICDSubCodeWhereUniqueInput!, create: ICDSubCodeCreateInput!, update: ICDSubCodeUpdateInput!): ICDSubCode!
  upsertRegion(where: RegionWhereUniqueInput!, create: RegionCreateInput!, update: RegionUpdateInput!): Region!
  upsertMedicalPractitioner(where: MedicalPractitionerWhereUniqueInput!, create: MedicalPractitionerCreateInput!, update: MedicalPractitionerUpdateInput!): MedicalPractitioner!
  upsertHospital(where: HospitalWhereUniqueInput!, create: HospitalCreateInput!, update: HospitalUpdateInput!): Hospital!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertICDCode(where: ICDCodeWhereUniqueInput!, create: ICDCodeCreateInput!, update: ICDCodeUpdateInput!): ICDCode!
  upsertBlock(where: BlockWhereUniqueInput!, create: BlockCreateInput!, update: BlockUpdateInput!): Block!
  updateManyDatabaseAdmins(data: DatabaseAdminUpdateManyMutationInput!, where: DatabaseAdminWhereInput): BatchPayload!
  updateManyCareProviders(data: CareProviderUpdateManyMutationInput!, where: CareProviderWhereInput): BatchPayload!
  updateManyInsurances(data: InsuranceUpdateManyMutationInput!, where: InsuranceWhereInput): BatchPayload!
  updateManyPatientCases(data: PatientCaseUpdateManyMutationInput!, where: PatientCaseWhereInput): BatchPayload!
  updateManyPatientRecords(data: PatientRecordUpdateManyMutationInput!, where: PatientRecordWhereInput): BatchPayload!
  updateManySharedCases(data: SharedCaseUpdateManyMutationInput!, where: SharedCaseWhereInput): BatchPayload!
  updateManySharedRecords(data: SharedRecordUpdateManyMutationInput!, where: SharedRecordWhereInput): BatchPayload!
  updateManyPatients(data: PatientUpdateManyMutationInput!, where: PatientWhereInput): BatchPayload!
  updateManyCountries(data: CountryUpdateManyMutationInput!, where: CountryWhereInput): BatchPayload!
  updateManyICDSubCodes(data: ICDSubCodeUpdateManyMutationInput!, where: ICDSubCodeWhereInput): BatchPayload!
  updateManyRegions(data: RegionUpdateManyMutationInput!, where: RegionWhereInput): BatchPayload!
  updateManyMedicalPractitioners(data: MedicalPractitionerUpdateManyMutationInput!, where: MedicalPractitionerWhereInput): BatchPayload!
  updateManyHospitals(data: HospitalUpdateManyMutationInput!, where: HospitalWhereInput): BatchPayload!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  updateManyICDCodes(data: ICDCodeUpdateManyMutationInput!, where: ICDCodeWhereInput): BatchPayload!
  updateManyBlocks(data: BlockUpdateManyMutationInput!, where: BlockWhereInput): BatchPayload!
  deleteManyBlockChains(where: BlockChainWhereInput): BatchPayload!
  deleteManyDatabaseAdmins(where: DatabaseAdminWhereInput): BatchPayload!
  deleteManyCareProviders(where: CareProviderWhereInput): BatchPayload!
  deleteManyInsurances(where: InsuranceWhereInput): BatchPayload!
  deleteManyPatientCases(where: PatientCaseWhereInput): BatchPayload!
  deleteManyPatientRecords(where: PatientRecordWhereInput): BatchPayload!
  deleteManySharedCases(where: SharedCaseWhereInput): BatchPayload!
  deleteManySharedRecords(where: SharedRecordWhereInput): BatchPayload!
  deleteManyPatients(where: PatientWhereInput): BatchPayload!
  deleteManyCountries(where: CountryWhereInput): BatchPayload!
  deleteManyICDSubCodes(where: ICDSubCodeWhereInput): BatchPayload!
  deleteManyRegions(where: RegionWhereInput): BatchPayload!
  deleteManyMedicalPractitioners(where: MedicalPractitionerWhereInput): BatchPayload!
  deleteManyHospitals(where: HospitalWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyICDCodes(where: ICDCodeWhereInput): BatchPayload!
  deleteManyBlocks(where: BlockWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Patient implements Node {
  id: ID!
  user: User!
  patientId: String!
  bloodGroup: String!
  religion: String!
  maritalStatus: MaritalStatus!
  primaryLanguage: String!
  birthPlace: String!
  address: String!
  pincode: Region!
  country: Country!
  occupation: String!
  contact1: String!
  contact2: String!
  socioEcoStatus: String!
  immunizationHistory: String!
  allergyStatus: Boolean!
  organDonorStatus: Boolean!
  PMH: String!
  DHx: String!
  Ca: Boolean!
  IDDM: Boolean!
  NIDDM: Boolean!
  COPD: Boolean!
  MI: Boolean!
  AF: Boolean!
  registeredAt: DateTime!
  cpId: CareProvider
  insurance: Insurance
  patientCase(where: PatientCaseWhereInput, orderBy: PatientCaseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PatientCase!]
}

type PatientCase implements Node {
  id: ID!
  patient: Patient!
  caseId: String!
  medicalPractitioner: MedicalPractitioner!
  icdCode: ICDCode!
  icdSubCode: ICDSubCode!
  HPC: String!
  MoI: String
  DandV: String
  clinicalNote: String!
  noOfVisits: Int!
  diagnosisType: DiagnosisType!
  currentClinicalStatus: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
  patientRecord(where: PatientRecordWhereInput, orderBy: PatientRecordOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PatientRecord!]
  sharedCase(where: SharedCaseWhereInput, orderBy: SharedCaseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SharedCase!]
  sharedRecord(where: SharedRecordWhereInput, orderBy: SharedRecordOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SharedRecord!]
}

"""A connection to a list of items."""
type PatientCaseConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PatientCaseEdge]!
  aggregate: AggregatePatientCase!
}

input PatientCaseCreateInput {
  id: ID
  caseId: String!
  HPC: String!
  MoI: String
  DandV: String
  clinicalNote: String!
  noOfVisits: Int!
  diagnosisType: DiagnosisType!
  currentClinicalStatus: Boolean!
  patient: PatientCreateOneWithoutPatientCaseInput!
  medicalPractitioner: MedicalPractitionerCreateOneInput!
  icdCode: ICDCodeCreateOneInput!
  icdSubCode: ICDSubCodeCreateOneInput!
  patientRecord: PatientRecordCreateManyWithoutCaseInput
  sharedCase: SharedCaseCreateManyWithoutCaseInput
  sharedRecord: SharedRecordCreateManyWithoutCaseInput
}

input PatientCaseCreateManyWithoutPatientInput {
  create: [PatientCaseCreateWithoutPatientInput!]
  connect: [PatientCaseWhereUniqueInput!]
}

input PatientCaseCreateOneWithoutPatientRecordInput {
  create: PatientCaseCreateWithoutPatientRecordInput
  connect: PatientCaseWhereUniqueInput
}

input PatientCaseCreateOneWithoutSharedCaseInput {
  create: PatientCaseCreateWithoutSharedCaseInput
  connect: PatientCaseWhereUniqueInput
}

input PatientCaseCreateOneWithoutSharedRecordInput {
  create: PatientCaseCreateWithoutSharedRecordInput
  connect: PatientCaseWhereUniqueInput
}

input PatientCaseCreateWithoutPatientInput {
  id: ID
  caseId: String!
  HPC: String!
  MoI: String
  DandV: String
  clinicalNote: String!
  noOfVisits: Int!
  diagnosisType: DiagnosisType!
  currentClinicalStatus: Boolean!
  medicalPractitioner: MedicalPractitionerCreateOneInput!
  icdCode: ICDCodeCreateOneInput!
  icdSubCode: ICDSubCodeCreateOneInput!
  patientRecord: PatientRecordCreateManyWithoutCaseInput
  sharedCase: SharedCaseCreateManyWithoutCaseInput
  sharedRecord: SharedRecordCreateManyWithoutCaseInput
}

input PatientCaseCreateWithoutPatientRecordInput {
  id: ID
  caseId: String!
  HPC: String!
  MoI: String
  DandV: String
  clinicalNote: String!
  noOfVisits: Int!
  diagnosisType: DiagnosisType!
  currentClinicalStatus: Boolean!
  patient: PatientCreateOneWithoutPatientCaseInput!
  medicalPractitioner: MedicalPractitionerCreateOneInput!
  icdCode: ICDCodeCreateOneInput!
  icdSubCode: ICDSubCodeCreateOneInput!
  sharedCase: SharedCaseCreateManyWithoutCaseInput
  sharedRecord: SharedRecordCreateManyWithoutCaseInput
}

input PatientCaseCreateWithoutSharedCaseInput {
  id: ID
  caseId: String!
  HPC: String!
  MoI: String
  DandV: String
  clinicalNote: String!
  noOfVisits: Int!
  diagnosisType: DiagnosisType!
  currentClinicalStatus: Boolean!
  patient: PatientCreateOneWithoutPatientCaseInput!
  medicalPractitioner: MedicalPractitionerCreateOneInput!
  icdCode: ICDCodeCreateOneInput!
  icdSubCode: ICDSubCodeCreateOneInput!
  patientRecord: PatientRecordCreateManyWithoutCaseInput
  sharedRecord: SharedRecordCreateManyWithoutCaseInput
}

input PatientCaseCreateWithoutSharedRecordInput {
  id: ID
  caseId: String!
  HPC: String!
  MoI: String
  DandV: String
  clinicalNote: String!
  noOfVisits: Int!
  diagnosisType: DiagnosisType!
  currentClinicalStatus: Boolean!
  patient: PatientCreateOneWithoutPatientCaseInput!
  medicalPractitioner: MedicalPractitionerCreateOneInput!
  icdCode: ICDCodeCreateOneInput!
  icdSubCode: ICDSubCodeCreateOneInput!
  patientRecord: PatientRecordCreateManyWithoutCaseInput
  sharedCase: SharedCaseCreateManyWithoutCaseInput
}

"""An edge in a connection."""
type PatientCaseEdge {
  """The item at the end of the edge."""
  node: PatientCase!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PatientCaseOrderByInput {
  id_ASC
  id_DESC
  caseId_ASC
  caseId_DESC
  HPC_ASC
  HPC_DESC
  MoI_ASC
  MoI_DESC
  DandV_ASC
  DandV_DESC
  clinicalNote_ASC
  clinicalNote_DESC
  noOfVisits_ASC
  noOfVisits_DESC
  diagnosisType_ASC
  diagnosisType_DESC
  currentClinicalStatus_ASC
  currentClinicalStatus_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type PatientCasePreviousValues {
  id: ID!
  caseId: String!
  HPC: String!
  MoI: String
  DandV: String
  clinicalNote: String!
  noOfVisits: Int!
  diagnosisType: DiagnosisType!
  currentClinicalStatus: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input PatientCaseScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [PatientCaseScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [PatientCaseScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PatientCaseScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  caseId: String

  """All values that are not equal to given value."""
  caseId_not: String

  """All values that are contained in given list."""
  caseId_in: [String!]

  """All values that are not contained in given list."""
  caseId_not_in: [String!]

  """All values less than the given value."""
  caseId_lt: String

  """All values less than or equal the given value."""
  caseId_lte: String

  """All values greater than the given value."""
  caseId_gt: String

  """All values greater than or equal the given value."""
  caseId_gte: String

  """All values containing the given string."""
  caseId_contains: String

  """All values not containing the given string."""
  caseId_not_contains: String

  """All values starting with the given string."""
  caseId_starts_with: String

  """All values not starting with the given string."""
  caseId_not_starts_with: String

  """All values ending with the given string."""
  caseId_ends_with: String

  """All values not ending with the given string."""
  caseId_not_ends_with: String
  HPC: String

  """All values that are not equal to given value."""
  HPC_not: String

  """All values that are contained in given list."""
  HPC_in: [String!]

  """All values that are not contained in given list."""
  HPC_not_in: [String!]

  """All values less than the given value."""
  HPC_lt: String

  """All values less than or equal the given value."""
  HPC_lte: String

  """All values greater than the given value."""
  HPC_gt: String

  """All values greater than or equal the given value."""
  HPC_gte: String

  """All values containing the given string."""
  HPC_contains: String

  """All values not containing the given string."""
  HPC_not_contains: String

  """All values starting with the given string."""
  HPC_starts_with: String

  """All values not starting with the given string."""
  HPC_not_starts_with: String

  """All values ending with the given string."""
  HPC_ends_with: String

  """All values not ending with the given string."""
  HPC_not_ends_with: String
  MoI: String

  """All values that are not equal to given value."""
  MoI_not: String

  """All values that are contained in given list."""
  MoI_in: [String!]

  """All values that are not contained in given list."""
  MoI_not_in: [String!]

  """All values less than the given value."""
  MoI_lt: String

  """All values less than or equal the given value."""
  MoI_lte: String

  """All values greater than the given value."""
  MoI_gt: String

  """All values greater than or equal the given value."""
  MoI_gte: String

  """All values containing the given string."""
  MoI_contains: String

  """All values not containing the given string."""
  MoI_not_contains: String

  """All values starting with the given string."""
  MoI_starts_with: String

  """All values not starting with the given string."""
  MoI_not_starts_with: String

  """All values ending with the given string."""
  MoI_ends_with: String

  """All values not ending with the given string."""
  MoI_not_ends_with: String
  DandV: String

  """All values that are not equal to given value."""
  DandV_not: String

  """All values that are contained in given list."""
  DandV_in: [String!]

  """All values that are not contained in given list."""
  DandV_not_in: [String!]

  """All values less than the given value."""
  DandV_lt: String

  """All values less than or equal the given value."""
  DandV_lte: String

  """All values greater than the given value."""
  DandV_gt: String

  """All values greater than or equal the given value."""
  DandV_gte: String

  """All values containing the given string."""
  DandV_contains: String

  """All values not containing the given string."""
  DandV_not_contains: String

  """All values starting with the given string."""
  DandV_starts_with: String

  """All values not starting with the given string."""
  DandV_not_starts_with: String

  """All values ending with the given string."""
  DandV_ends_with: String

  """All values not ending with the given string."""
  DandV_not_ends_with: String
  clinicalNote: String

  """All values that are not equal to given value."""
  clinicalNote_not: String

  """All values that are contained in given list."""
  clinicalNote_in: [String!]

  """All values that are not contained in given list."""
  clinicalNote_not_in: [String!]

  """All values less than the given value."""
  clinicalNote_lt: String

  """All values less than or equal the given value."""
  clinicalNote_lte: String

  """All values greater than the given value."""
  clinicalNote_gt: String

  """All values greater than or equal the given value."""
  clinicalNote_gte: String

  """All values containing the given string."""
  clinicalNote_contains: String

  """All values not containing the given string."""
  clinicalNote_not_contains: String

  """All values starting with the given string."""
  clinicalNote_starts_with: String

  """All values not starting with the given string."""
  clinicalNote_not_starts_with: String

  """All values ending with the given string."""
  clinicalNote_ends_with: String

  """All values not ending with the given string."""
  clinicalNote_not_ends_with: String
  noOfVisits: Int

  """All values that are not equal to given value."""
  noOfVisits_not: Int

  """All values that are contained in given list."""
  noOfVisits_in: [Int!]

  """All values that are not contained in given list."""
  noOfVisits_not_in: [Int!]

  """All values less than the given value."""
  noOfVisits_lt: Int

  """All values less than or equal the given value."""
  noOfVisits_lte: Int

  """All values greater than the given value."""
  noOfVisits_gt: Int

  """All values greater than or equal the given value."""
  noOfVisits_gte: Int
  diagnosisType: DiagnosisType

  """All values that are not equal to given value."""
  diagnosisType_not: DiagnosisType

  """All values that are contained in given list."""
  diagnosisType_in: [DiagnosisType!]

  """All values that are not contained in given list."""
  diagnosisType_not_in: [DiagnosisType!]
  currentClinicalStatus: Boolean

  """All values that are not equal to given value."""
  currentClinicalStatus_not: Boolean
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type PatientCaseSubscriptionPayload {
  mutation: MutationType!
  node: PatientCase
  updatedFields: [String!]
  previousValues: PatientCasePreviousValues
}

input PatientCaseSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PatientCaseSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PatientCaseWhereInput
}

input PatientCaseUpdateInput {
  caseId: String
  HPC: String
  MoI: String
  DandV: String
  clinicalNote: String
  noOfVisits: Int
  diagnosisType: DiagnosisType
  currentClinicalStatus: Boolean
  patient: PatientUpdateOneRequiredWithoutPatientCaseInput
  medicalPractitioner: MedicalPractitionerUpdateOneRequiredInput
  icdCode: ICDCodeUpdateOneRequiredInput
  icdSubCode: ICDSubCodeUpdateOneRequiredInput
  patientRecord: PatientRecordUpdateManyWithoutCaseInput
  sharedCase: SharedCaseUpdateManyWithoutCaseInput
  sharedRecord: SharedRecordUpdateManyWithoutCaseInput
}

input PatientCaseUpdateManyDataInput {
  caseId: String
  HPC: String
  MoI: String
  DandV: String
  clinicalNote: String
  noOfVisits: Int
  diagnosisType: DiagnosisType
  currentClinicalStatus: Boolean
}

input PatientCaseUpdateManyMutationInput {
  caseId: String
  HPC: String
  MoI: String
  DandV: String
  clinicalNote: String
  noOfVisits: Int
  diagnosisType: DiagnosisType
  currentClinicalStatus: Boolean
}

input PatientCaseUpdateManyWithoutPatientInput {
  create: [PatientCaseCreateWithoutPatientInput!]
  connect: [PatientCaseWhereUniqueInput!]
  set: [PatientCaseWhereUniqueInput!]
  disconnect: [PatientCaseWhereUniqueInput!]
  delete: [PatientCaseWhereUniqueInput!]
  update: [PatientCaseUpdateWithWhereUniqueWithoutPatientInput!]
  updateMany: [PatientCaseUpdateManyWithWhereNestedInput!]
  deleteMany: [PatientCaseScalarWhereInput!]
  upsert: [PatientCaseUpsertWithWhereUniqueWithoutPatientInput!]
}

input PatientCaseUpdateManyWithWhereNestedInput {
  where: PatientCaseScalarWhereInput!
  data: PatientCaseUpdateManyDataInput!
}

input PatientCaseUpdateOneRequiredWithoutPatientRecordInput {
  create: PatientCaseCreateWithoutPatientRecordInput
  connect: PatientCaseWhereUniqueInput
  update: PatientCaseUpdateWithoutPatientRecordDataInput
  upsert: PatientCaseUpsertWithoutPatientRecordInput
}

input PatientCaseUpdateOneRequiredWithoutSharedCaseInput {
  create: PatientCaseCreateWithoutSharedCaseInput
  connect: PatientCaseWhereUniqueInput
  update: PatientCaseUpdateWithoutSharedCaseDataInput
  upsert: PatientCaseUpsertWithoutSharedCaseInput
}

input PatientCaseUpdateOneRequiredWithoutSharedRecordInput {
  create: PatientCaseCreateWithoutSharedRecordInput
  connect: PatientCaseWhereUniqueInput
  update: PatientCaseUpdateWithoutSharedRecordDataInput
  upsert: PatientCaseUpsertWithoutSharedRecordInput
}

input PatientCaseUpdateWithoutPatientDataInput {
  caseId: String
  HPC: String
  MoI: String
  DandV: String
  clinicalNote: String
  noOfVisits: Int
  diagnosisType: DiagnosisType
  currentClinicalStatus: Boolean
  medicalPractitioner: MedicalPractitionerUpdateOneRequiredInput
  icdCode: ICDCodeUpdateOneRequiredInput
  icdSubCode: ICDSubCodeUpdateOneRequiredInput
  patientRecord: PatientRecordUpdateManyWithoutCaseInput
  sharedCase: SharedCaseUpdateManyWithoutCaseInput
  sharedRecord: SharedRecordUpdateManyWithoutCaseInput
}

input PatientCaseUpdateWithoutPatientRecordDataInput {
  caseId: String
  HPC: String
  MoI: String
  DandV: String
  clinicalNote: String
  noOfVisits: Int
  diagnosisType: DiagnosisType
  currentClinicalStatus: Boolean
  patient: PatientUpdateOneRequiredWithoutPatientCaseInput
  medicalPractitioner: MedicalPractitionerUpdateOneRequiredInput
  icdCode: ICDCodeUpdateOneRequiredInput
  icdSubCode: ICDSubCodeUpdateOneRequiredInput
  sharedCase: SharedCaseUpdateManyWithoutCaseInput
  sharedRecord: SharedRecordUpdateManyWithoutCaseInput
}

input PatientCaseUpdateWithoutSharedCaseDataInput {
  caseId: String
  HPC: String
  MoI: String
  DandV: String
  clinicalNote: String
  noOfVisits: Int
  diagnosisType: DiagnosisType
  currentClinicalStatus: Boolean
  patient: PatientUpdateOneRequiredWithoutPatientCaseInput
  medicalPractitioner: MedicalPractitionerUpdateOneRequiredInput
  icdCode: ICDCodeUpdateOneRequiredInput
  icdSubCode: ICDSubCodeUpdateOneRequiredInput
  patientRecord: PatientRecordUpdateManyWithoutCaseInput
  sharedRecord: SharedRecordUpdateManyWithoutCaseInput
}

input PatientCaseUpdateWithoutSharedRecordDataInput {
  caseId: String
  HPC: String
  MoI: String
  DandV: String
  clinicalNote: String
  noOfVisits: Int
  diagnosisType: DiagnosisType
  currentClinicalStatus: Boolean
  patient: PatientUpdateOneRequiredWithoutPatientCaseInput
  medicalPractitioner: MedicalPractitionerUpdateOneRequiredInput
  icdCode: ICDCodeUpdateOneRequiredInput
  icdSubCode: ICDSubCodeUpdateOneRequiredInput
  patientRecord: PatientRecordUpdateManyWithoutCaseInput
  sharedCase: SharedCaseUpdateManyWithoutCaseInput
}

input PatientCaseUpdateWithWhereUniqueWithoutPatientInput {
  where: PatientCaseWhereUniqueInput!
  data: PatientCaseUpdateWithoutPatientDataInput!
}

input PatientCaseUpsertWithoutPatientRecordInput {
  update: PatientCaseUpdateWithoutPatientRecordDataInput!
  create: PatientCaseCreateWithoutPatientRecordInput!
}

input PatientCaseUpsertWithoutSharedCaseInput {
  update: PatientCaseUpdateWithoutSharedCaseDataInput!
  create: PatientCaseCreateWithoutSharedCaseInput!
}

input PatientCaseUpsertWithoutSharedRecordInput {
  update: PatientCaseUpdateWithoutSharedRecordDataInput!
  create: PatientCaseCreateWithoutSharedRecordInput!
}

input PatientCaseUpsertWithWhereUniqueWithoutPatientInput {
  where: PatientCaseWhereUniqueInput!
  update: PatientCaseUpdateWithoutPatientDataInput!
  create: PatientCaseCreateWithoutPatientInput!
}

input PatientCaseWhereInput {
  """Logical AND on all given filters."""
  AND: [PatientCaseWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  caseId: String

  """All values that are not equal to given value."""
  caseId_not: String

  """All values that are contained in given list."""
  caseId_in: [String!]

  """All values that are not contained in given list."""
  caseId_not_in: [String!]

  """All values less than the given value."""
  caseId_lt: String

  """All values less than or equal the given value."""
  caseId_lte: String

  """All values greater than the given value."""
  caseId_gt: String

  """All values greater than or equal the given value."""
  caseId_gte: String

  """All values containing the given string."""
  caseId_contains: String

  """All values not containing the given string."""
  caseId_not_contains: String

  """All values starting with the given string."""
  caseId_starts_with: String

  """All values not starting with the given string."""
  caseId_not_starts_with: String

  """All values ending with the given string."""
  caseId_ends_with: String

  """All values not ending with the given string."""
  caseId_not_ends_with: String
  HPC: String

  """All values that are not equal to given value."""
  HPC_not: String

  """All values that are contained in given list."""
  HPC_in: [String!]

  """All values that are not contained in given list."""
  HPC_not_in: [String!]

  """All values less than the given value."""
  HPC_lt: String

  """All values less than or equal the given value."""
  HPC_lte: String

  """All values greater than the given value."""
  HPC_gt: String

  """All values greater than or equal the given value."""
  HPC_gte: String

  """All values containing the given string."""
  HPC_contains: String

  """All values not containing the given string."""
  HPC_not_contains: String

  """All values starting with the given string."""
  HPC_starts_with: String

  """All values not starting with the given string."""
  HPC_not_starts_with: String

  """All values ending with the given string."""
  HPC_ends_with: String

  """All values not ending with the given string."""
  HPC_not_ends_with: String
  MoI: String

  """All values that are not equal to given value."""
  MoI_not: String

  """All values that are contained in given list."""
  MoI_in: [String!]

  """All values that are not contained in given list."""
  MoI_not_in: [String!]

  """All values less than the given value."""
  MoI_lt: String

  """All values less than or equal the given value."""
  MoI_lte: String

  """All values greater than the given value."""
  MoI_gt: String

  """All values greater than or equal the given value."""
  MoI_gte: String

  """All values containing the given string."""
  MoI_contains: String

  """All values not containing the given string."""
  MoI_not_contains: String

  """All values starting with the given string."""
  MoI_starts_with: String

  """All values not starting with the given string."""
  MoI_not_starts_with: String

  """All values ending with the given string."""
  MoI_ends_with: String

  """All values not ending with the given string."""
  MoI_not_ends_with: String
  DandV: String

  """All values that are not equal to given value."""
  DandV_not: String

  """All values that are contained in given list."""
  DandV_in: [String!]

  """All values that are not contained in given list."""
  DandV_not_in: [String!]

  """All values less than the given value."""
  DandV_lt: String

  """All values less than or equal the given value."""
  DandV_lte: String

  """All values greater than the given value."""
  DandV_gt: String

  """All values greater than or equal the given value."""
  DandV_gte: String

  """All values containing the given string."""
  DandV_contains: String

  """All values not containing the given string."""
  DandV_not_contains: String

  """All values starting with the given string."""
  DandV_starts_with: String

  """All values not starting with the given string."""
  DandV_not_starts_with: String

  """All values ending with the given string."""
  DandV_ends_with: String

  """All values not ending with the given string."""
  DandV_not_ends_with: String
  clinicalNote: String

  """All values that are not equal to given value."""
  clinicalNote_not: String

  """All values that are contained in given list."""
  clinicalNote_in: [String!]

  """All values that are not contained in given list."""
  clinicalNote_not_in: [String!]

  """All values less than the given value."""
  clinicalNote_lt: String

  """All values less than or equal the given value."""
  clinicalNote_lte: String

  """All values greater than the given value."""
  clinicalNote_gt: String

  """All values greater than or equal the given value."""
  clinicalNote_gte: String

  """All values containing the given string."""
  clinicalNote_contains: String

  """All values not containing the given string."""
  clinicalNote_not_contains: String

  """All values starting with the given string."""
  clinicalNote_starts_with: String

  """All values not starting with the given string."""
  clinicalNote_not_starts_with: String

  """All values ending with the given string."""
  clinicalNote_ends_with: String

  """All values not ending with the given string."""
  clinicalNote_not_ends_with: String
  noOfVisits: Int

  """All values that are not equal to given value."""
  noOfVisits_not: Int

  """All values that are contained in given list."""
  noOfVisits_in: [Int!]

  """All values that are not contained in given list."""
  noOfVisits_not_in: [Int!]

  """All values less than the given value."""
  noOfVisits_lt: Int

  """All values less than or equal the given value."""
  noOfVisits_lte: Int

  """All values greater than the given value."""
  noOfVisits_gt: Int

  """All values greater than or equal the given value."""
  noOfVisits_gte: Int
  diagnosisType: DiagnosisType

  """All values that are not equal to given value."""
  diagnosisType_not: DiagnosisType

  """All values that are contained in given list."""
  diagnosisType_in: [DiagnosisType!]

  """All values that are not contained in given list."""
  diagnosisType_not_in: [DiagnosisType!]
  currentClinicalStatus: Boolean

  """All values that are not equal to given value."""
  currentClinicalStatus_not: Boolean
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  patient: PatientWhereInput
  medicalPractitioner: MedicalPractitionerWhereInput
  icdCode: ICDCodeWhereInput
  icdSubCode: ICDSubCodeWhereInput
  patientRecord_some: PatientRecordWhereInput
  sharedCase_some: SharedCaseWhereInput
  sharedRecord_some: SharedRecordWhereInput
}

input PatientCaseWhereUniqueInput {
  id: ID
  caseId: String
}

"""A connection to a list of items."""
type PatientConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PatientEdge]!
  aggregate: AggregatePatient!
}

input PatientCreateInput {
  id: ID
  patientId: String!
  bloodGroup: String!
  religion: String!
  maritalStatus: MaritalStatus!
  primaryLanguage: String!
  birthPlace: String!
  address: String!
  occupation: String!
  contact1: String!
  contact2: String!
  socioEcoStatus: String!
  immunizationHistory: String!
  allergyStatus: Boolean
  organDonorStatus: Boolean
  PMH: String!
  DHx: String!
  Ca: Boolean
  IDDM: Boolean
  NIDDM: Boolean
  COPD: Boolean
  MI: Boolean
  AF: Boolean
  user: UserCreateOneInput!
  pincode: RegionCreateOneInput!
  country: CountryCreateOneInput!
  cpId: CareProviderCreateOneWithoutPatientInput
  insurance: InsuranceCreateOneWithoutPatientInput
  patientCase: PatientCaseCreateManyWithoutPatientInput
}

input PatientCreateOneInput {
  create: PatientCreateInput
  connect: PatientWhereUniqueInput
}

input PatientCreateOneWithoutCpIdInput {
  create: PatientCreateWithoutCpIdInput
  connect: PatientWhereUniqueInput
}

input PatientCreateOneWithoutInsuranceInput {
  create: PatientCreateWithoutInsuranceInput
  connect: PatientWhereUniqueInput
}

input PatientCreateOneWithoutPatientCaseInput {
  create: PatientCreateWithoutPatientCaseInput
  connect: PatientWhereUniqueInput
}

input PatientCreateWithoutCpIdInput {
  id: ID
  patientId: String!
  bloodGroup: String!
  religion: String!
  maritalStatus: MaritalStatus!
  primaryLanguage: String!
  birthPlace: String!
  address: String!
  occupation: String!
  contact1: String!
  contact2: String!
  socioEcoStatus: String!
  immunizationHistory: String!
  allergyStatus: Boolean
  organDonorStatus: Boolean
  PMH: String!
  DHx: String!
  Ca: Boolean
  IDDM: Boolean
  NIDDM: Boolean
  COPD: Boolean
  MI: Boolean
  AF: Boolean
  user: UserCreateOneInput!
  pincode: RegionCreateOneInput!
  country: CountryCreateOneInput!
  insurance: InsuranceCreateOneWithoutPatientInput
  patientCase: PatientCaseCreateManyWithoutPatientInput
}

input PatientCreateWithoutInsuranceInput {
  id: ID
  patientId: String!
  bloodGroup: String!
  religion: String!
  maritalStatus: MaritalStatus!
  primaryLanguage: String!
  birthPlace: String!
  address: String!
  occupation: String!
  contact1: String!
  contact2: String!
  socioEcoStatus: String!
  immunizationHistory: String!
  allergyStatus: Boolean
  organDonorStatus: Boolean
  PMH: String!
  DHx: String!
  Ca: Boolean
  IDDM: Boolean
  NIDDM: Boolean
  COPD: Boolean
  MI: Boolean
  AF: Boolean
  user: UserCreateOneInput!
  pincode: RegionCreateOneInput!
  country: CountryCreateOneInput!
  cpId: CareProviderCreateOneWithoutPatientInput
  patientCase: PatientCaseCreateManyWithoutPatientInput
}

input PatientCreateWithoutPatientCaseInput {
  id: ID
  patientId: String!
  bloodGroup: String!
  religion: String!
  maritalStatus: MaritalStatus!
  primaryLanguage: String!
  birthPlace: String!
  address: String!
  occupation: String!
  contact1: String!
  contact2: String!
  socioEcoStatus: String!
  immunizationHistory: String!
  allergyStatus: Boolean
  organDonorStatus: Boolean
  PMH: String!
  DHx: String!
  Ca: Boolean
  IDDM: Boolean
  NIDDM: Boolean
  COPD: Boolean
  MI: Boolean
  AF: Boolean
  user: UserCreateOneInput!
  pincode: RegionCreateOneInput!
  country: CountryCreateOneInput!
  cpId: CareProviderCreateOneWithoutPatientInput
  insurance: InsuranceCreateOneWithoutPatientInput
}

"""An edge in a connection."""
type PatientEdge {
  """The item at the end of the edge."""
  node: Patient!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PatientOrderByInput {
  id_ASC
  id_DESC
  patientId_ASC
  patientId_DESC
  bloodGroup_ASC
  bloodGroup_DESC
  religion_ASC
  religion_DESC
  maritalStatus_ASC
  maritalStatus_DESC
  primaryLanguage_ASC
  primaryLanguage_DESC
  birthPlace_ASC
  birthPlace_DESC
  address_ASC
  address_DESC
  occupation_ASC
  occupation_DESC
  contact1_ASC
  contact1_DESC
  contact2_ASC
  contact2_DESC
  socioEcoStatus_ASC
  socioEcoStatus_DESC
  immunizationHistory_ASC
  immunizationHistory_DESC
  allergyStatus_ASC
  allergyStatus_DESC
  organDonorStatus_ASC
  organDonorStatus_DESC
  PMH_ASC
  PMH_DESC
  DHx_ASC
  DHx_DESC
  Ca_ASC
  Ca_DESC
  IDDM_ASC
  IDDM_DESC
  NIDDM_ASC
  NIDDM_DESC
  COPD_ASC
  COPD_DESC
  MI_ASC
  MI_DESC
  AF_ASC
  AF_DESC
  registeredAt_ASC
  registeredAt_DESC
}

type PatientPreviousValues {
  id: ID!
  patientId: String!
  bloodGroup: String!
  religion: String!
  maritalStatus: MaritalStatus!
  primaryLanguage: String!
  birthPlace: String!
  address: String!
  occupation: String!
  contact1: String!
  contact2: String!
  socioEcoStatus: String!
  immunizationHistory: String!
  allergyStatus: Boolean!
  organDonorStatus: Boolean!
  PMH: String!
  DHx: String!
  Ca: Boolean!
  IDDM: Boolean!
  NIDDM: Boolean!
  COPD: Boolean!
  MI: Boolean!
  AF: Boolean!
  registeredAt: DateTime!
}

type PatientRecord implements Node {
  id: ID!
  patient: Patient!
  case: PatientCase!
  recordId: String!
  medicalPractitioner: MedicalPractitioner!
  visitNo: Int!
  onArrival: String!
  diagnosis: String!
  Tx: String!
  reportSuggestions: String
  cevsSp: Int!
  cevsDp: Int!
  cePr: Int!
  ceRr: Int!
  ceHeight: Int!
  ceWeight: Int!
  diagnosisAfterReport: String
  medication: String!
  advice: String!
  query: String!
  followUpObservations: String!
  createdAt: DateTime!
  sharedRecord(where: SharedRecordWhereInput, orderBy: SharedRecordOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SharedRecord!]
}

"""A connection to a list of items."""
type PatientRecordConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PatientRecordEdge]!
  aggregate: AggregatePatientRecord!
}

input PatientRecordCreateInput {
  id: ID
  recordId: String!
  visitNo: Int!
  onArrival: String!
  diagnosis: String!
  Tx: String!
  reportSuggestions: String
  cevsSp: Int!
  cevsDp: Int!
  cePr: Int!
  ceRr: Int!
  ceHeight: Int!
  ceWeight: Int!
  diagnosisAfterReport: String
  medication: String!
  advice: String!
  query: String!
  followUpObservations: String!
  patient: PatientCreateOneInput!
  case: PatientCaseCreateOneWithoutPatientRecordInput!
  medicalPractitioner: MedicalPractitionerCreateOneInput!
  sharedRecord: SharedRecordCreateManyWithoutRecordInput
}

input PatientRecordCreateManyWithoutCaseInput {
  create: [PatientRecordCreateWithoutCaseInput!]
  connect: [PatientRecordWhereUniqueInput!]
}

input PatientRecordCreateOneWithoutSharedRecordInput {
  create: PatientRecordCreateWithoutSharedRecordInput
  connect: PatientRecordWhereUniqueInput
}

input PatientRecordCreateWithoutCaseInput {
  id: ID
  recordId: String!
  visitNo: Int!
  onArrival: String!
  diagnosis: String!
  Tx: String!
  reportSuggestions: String
  cevsSp: Int!
  cevsDp: Int!
  cePr: Int!
  ceRr: Int!
  ceHeight: Int!
  ceWeight: Int!
  diagnosisAfterReport: String
  medication: String!
  advice: String!
  query: String!
  followUpObservations: String!
  patient: PatientCreateOneInput!
  medicalPractitioner: MedicalPractitionerCreateOneInput!
  sharedRecord: SharedRecordCreateManyWithoutRecordInput
}

input PatientRecordCreateWithoutSharedRecordInput {
  id: ID
  recordId: String!
  visitNo: Int!
  onArrival: String!
  diagnosis: String!
  Tx: String!
  reportSuggestions: String
  cevsSp: Int!
  cevsDp: Int!
  cePr: Int!
  ceRr: Int!
  ceHeight: Int!
  ceWeight: Int!
  diagnosisAfterReport: String
  medication: String!
  advice: String!
  query: String!
  followUpObservations: String!
  patient: PatientCreateOneInput!
  case: PatientCaseCreateOneWithoutPatientRecordInput!
  medicalPractitioner: MedicalPractitionerCreateOneInput!
}

"""An edge in a connection."""
type PatientRecordEdge {
  """The item at the end of the edge."""
  node: PatientRecord!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PatientRecordOrderByInput {
  id_ASC
  id_DESC
  recordId_ASC
  recordId_DESC
  visitNo_ASC
  visitNo_DESC
  onArrival_ASC
  onArrival_DESC
  diagnosis_ASC
  diagnosis_DESC
  Tx_ASC
  Tx_DESC
  reportSuggestions_ASC
  reportSuggestions_DESC
  cevsSp_ASC
  cevsSp_DESC
  cevsDp_ASC
  cevsDp_DESC
  cePr_ASC
  cePr_DESC
  ceRr_ASC
  ceRr_DESC
  ceHeight_ASC
  ceHeight_DESC
  ceWeight_ASC
  ceWeight_DESC
  diagnosisAfterReport_ASC
  diagnosisAfterReport_DESC
  medication_ASC
  medication_DESC
  advice_ASC
  advice_DESC
  query_ASC
  query_DESC
  followUpObservations_ASC
  followUpObservations_DESC
  createdAt_ASC
  createdAt_DESC
}

type PatientRecordPreviousValues {
  id: ID!
  recordId: String!
  visitNo: Int!
  onArrival: String!
  diagnosis: String!
  Tx: String!
  reportSuggestions: String
  cevsSp: Int!
  cevsDp: Int!
  cePr: Int!
  ceRr: Int!
  ceHeight: Int!
  ceWeight: Int!
  diagnosisAfterReport: String
  medication: String!
  advice: String!
  query: String!
  followUpObservations: String!
  createdAt: DateTime!
}

input PatientRecordScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [PatientRecordScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [PatientRecordScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PatientRecordScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  recordId: String

  """All values that are not equal to given value."""
  recordId_not: String

  """All values that are contained in given list."""
  recordId_in: [String!]

  """All values that are not contained in given list."""
  recordId_not_in: [String!]

  """All values less than the given value."""
  recordId_lt: String

  """All values less than or equal the given value."""
  recordId_lte: String

  """All values greater than the given value."""
  recordId_gt: String

  """All values greater than or equal the given value."""
  recordId_gte: String

  """All values containing the given string."""
  recordId_contains: String

  """All values not containing the given string."""
  recordId_not_contains: String

  """All values starting with the given string."""
  recordId_starts_with: String

  """All values not starting with the given string."""
  recordId_not_starts_with: String

  """All values ending with the given string."""
  recordId_ends_with: String

  """All values not ending with the given string."""
  recordId_not_ends_with: String
  visitNo: Int

  """All values that are not equal to given value."""
  visitNo_not: Int

  """All values that are contained in given list."""
  visitNo_in: [Int!]

  """All values that are not contained in given list."""
  visitNo_not_in: [Int!]

  """All values less than the given value."""
  visitNo_lt: Int

  """All values less than or equal the given value."""
  visitNo_lte: Int

  """All values greater than the given value."""
  visitNo_gt: Int

  """All values greater than or equal the given value."""
  visitNo_gte: Int
  onArrival: String

  """All values that are not equal to given value."""
  onArrival_not: String

  """All values that are contained in given list."""
  onArrival_in: [String!]

  """All values that are not contained in given list."""
  onArrival_not_in: [String!]

  """All values less than the given value."""
  onArrival_lt: String

  """All values less than or equal the given value."""
  onArrival_lte: String

  """All values greater than the given value."""
  onArrival_gt: String

  """All values greater than or equal the given value."""
  onArrival_gte: String

  """All values containing the given string."""
  onArrival_contains: String

  """All values not containing the given string."""
  onArrival_not_contains: String

  """All values starting with the given string."""
  onArrival_starts_with: String

  """All values not starting with the given string."""
  onArrival_not_starts_with: String

  """All values ending with the given string."""
  onArrival_ends_with: String

  """All values not ending with the given string."""
  onArrival_not_ends_with: String
  diagnosis: String

  """All values that are not equal to given value."""
  diagnosis_not: String

  """All values that are contained in given list."""
  diagnosis_in: [String!]

  """All values that are not contained in given list."""
  diagnosis_not_in: [String!]

  """All values less than the given value."""
  diagnosis_lt: String

  """All values less than or equal the given value."""
  diagnosis_lte: String

  """All values greater than the given value."""
  diagnosis_gt: String

  """All values greater than or equal the given value."""
  diagnosis_gte: String

  """All values containing the given string."""
  diagnosis_contains: String

  """All values not containing the given string."""
  diagnosis_not_contains: String

  """All values starting with the given string."""
  diagnosis_starts_with: String

  """All values not starting with the given string."""
  diagnosis_not_starts_with: String

  """All values ending with the given string."""
  diagnosis_ends_with: String

  """All values not ending with the given string."""
  diagnosis_not_ends_with: String
  Tx: String

  """All values that are not equal to given value."""
  Tx_not: String

  """All values that are contained in given list."""
  Tx_in: [String!]

  """All values that are not contained in given list."""
  Tx_not_in: [String!]

  """All values less than the given value."""
  Tx_lt: String

  """All values less than or equal the given value."""
  Tx_lte: String

  """All values greater than the given value."""
  Tx_gt: String

  """All values greater than or equal the given value."""
  Tx_gte: String

  """All values containing the given string."""
  Tx_contains: String

  """All values not containing the given string."""
  Tx_not_contains: String

  """All values starting with the given string."""
  Tx_starts_with: String

  """All values not starting with the given string."""
  Tx_not_starts_with: String

  """All values ending with the given string."""
  Tx_ends_with: String

  """All values not ending with the given string."""
  Tx_not_ends_with: String
  reportSuggestions: String

  """All values that are not equal to given value."""
  reportSuggestions_not: String

  """All values that are contained in given list."""
  reportSuggestions_in: [String!]

  """All values that are not contained in given list."""
  reportSuggestions_not_in: [String!]

  """All values less than the given value."""
  reportSuggestions_lt: String

  """All values less than or equal the given value."""
  reportSuggestions_lte: String

  """All values greater than the given value."""
  reportSuggestions_gt: String

  """All values greater than or equal the given value."""
  reportSuggestions_gte: String

  """All values containing the given string."""
  reportSuggestions_contains: String

  """All values not containing the given string."""
  reportSuggestions_not_contains: String

  """All values starting with the given string."""
  reportSuggestions_starts_with: String

  """All values not starting with the given string."""
  reportSuggestions_not_starts_with: String

  """All values ending with the given string."""
  reportSuggestions_ends_with: String

  """All values not ending with the given string."""
  reportSuggestions_not_ends_with: String
  cevsSp: Int

  """All values that are not equal to given value."""
  cevsSp_not: Int

  """All values that are contained in given list."""
  cevsSp_in: [Int!]

  """All values that are not contained in given list."""
  cevsSp_not_in: [Int!]

  """All values less than the given value."""
  cevsSp_lt: Int

  """All values less than or equal the given value."""
  cevsSp_lte: Int

  """All values greater than the given value."""
  cevsSp_gt: Int

  """All values greater than or equal the given value."""
  cevsSp_gte: Int
  cevsDp: Int

  """All values that are not equal to given value."""
  cevsDp_not: Int

  """All values that are contained in given list."""
  cevsDp_in: [Int!]

  """All values that are not contained in given list."""
  cevsDp_not_in: [Int!]

  """All values less than the given value."""
  cevsDp_lt: Int

  """All values less than or equal the given value."""
  cevsDp_lte: Int

  """All values greater than the given value."""
  cevsDp_gt: Int

  """All values greater than or equal the given value."""
  cevsDp_gte: Int
  cePr: Int

  """All values that are not equal to given value."""
  cePr_not: Int

  """All values that are contained in given list."""
  cePr_in: [Int!]

  """All values that are not contained in given list."""
  cePr_not_in: [Int!]

  """All values less than the given value."""
  cePr_lt: Int

  """All values less than or equal the given value."""
  cePr_lte: Int

  """All values greater than the given value."""
  cePr_gt: Int

  """All values greater than or equal the given value."""
  cePr_gte: Int
  ceRr: Int

  """All values that are not equal to given value."""
  ceRr_not: Int

  """All values that are contained in given list."""
  ceRr_in: [Int!]

  """All values that are not contained in given list."""
  ceRr_not_in: [Int!]

  """All values less than the given value."""
  ceRr_lt: Int

  """All values less than or equal the given value."""
  ceRr_lte: Int

  """All values greater than the given value."""
  ceRr_gt: Int

  """All values greater than or equal the given value."""
  ceRr_gte: Int
  ceHeight: Int

  """All values that are not equal to given value."""
  ceHeight_not: Int

  """All values that are contained in given list."""
  ceHeight_in: [Int!]

  """All values that are not contained in given list."""
  ceHeight_not_in: [Int!]

  """All values less than the given value."""
  ceHeight_lt: Int

  """All values less than or equal the given value."""
  ceHeight_lte: Int

  """All values greater than the given value."""
  ceHeight_gt: Int

  """All values greater than or equal the given value."""
  ceHeight_gte: Int
  ceWeight: Int

  """All values that are not equal to given value."""
  ceWeight_not: Int

  """All values that are contained in given list."""
  ceWeight_in: [Int!]

  """All values that are not contained in given list."""
  ceWeight_not_in: [Int!]

  """All values less than the given value."""
  ceWeight_lt: Int

  """All values less than or equal the given value."""
  ceWeight_lte: Int

  """All values greater than the given value."""
  ceWeight_gt: Int

  """All values greater than or equal the given value."""
  ceWeight_gte: Int
  diagnosisAfterReport: String

  """All values that are not equal to given value."""
  diagnosisAfterReport_not: String

  """All values that are contained in given list."""
  diagnosisAfterReport_in: [String!]

  """All values that are not contained in given list."""
  diagnosisAfterReport_not_in: [String!]

  """All values less than the given value."""
  diagnosisAfterReport_lt: String

  """All values less than or equal the given value."""
  diagnosisAfterReport_lte: String

  """All values greater than the given value."""
  diagnosisAfterReport_gt: String

  """All values greater than or equal the given value."""
  diagnosisAfterReport_gte: String

  """All values containing the given string."""
  diagnosisAfterReport_contains: String

  """All values not containing the given string."""
  diagnosisAfterReport_not_contains: String

  """All values starting with the given string."""
  diagnosisAfterReport_starts_with: String

  """All values not starting with the given string."""
  diagnosisAfterReport_not_starts_with: String

  """All values ending with the given string."""
  diagnosisAfterReport_ends_with: String

  """All values not ending with the given string."""
  diagnosisAfterReport_not_ends_with: String
  medication: String

  """All values that are not equal to given value."""
  medication_not: String

  """All values that are contained in given list."""
  medication_in: [String!]

  """All values that are not contained in given list."""
  medication_not_in: [String!]

  """All values less than the given value."""
  medication_lt: String

  """All values less than or equal the given value."""
  medication_lte: String

  """All values greater than the given value."""
  medication_gt: String

  """All values greater than or equal the given value."""
  medication_gte: String

  """All values containing the given string."""
  medication_contains: String

  """All values not containing the given string."""
  medication_not_contains: String

  """All values starting with the given string."""
  medication_starts_with: String

  """All values not starting with the given string."""
  medication_not_starts_with: String

  """All values ending with the given string."""
  medication_ends_with: String

  """All values not ending with the given string."""
  medication_not_ends_with: String
  advice: String

  """All values that are not equal to given value."""
  advice_not: String

  """All values that are contained in given list."""
  advice_in: [String!]

  """All values that are not contained in given list."""
  advice_not_in: [String!]

  """All values less than the given value."""
  advice_lt: String

  """All values less than or equal the given value."""
  advice_lte: String

  """All values greater than the given value."""
  advice_gt: String

  """All values greater than or equal the given value."""
  advice_gte: String

  """All values containing the given string."""
  advice_contains: String

  """All values not containing the given string."""
  advice_not_contains: String

  """All values starting with the given string."""
  advice_starts_with: String

  """All values not starting with the given string."""
  advice_not_starts_with: String

  """All values ending with the given string."""
  advice_ends_with: String

  """All values not ending with the given string."""
  advice_not_ends_with: String
  query: String

  """All values that are not equal to given value."""
  query_not: String

  """All values that are contained in given list."""
  query_in: [String!]

  """All values that are not contained in given list."""
  query_not_in: [String!]

  """All values less than the given value."""
  query_lt: String

  """All values less than or equal the given value."""
  query_lte: String

  """All values greater than the given value."""
  query_gt: String

  """All values greater than or equal the given value."""
  query_gte: String

  """All values containing the given string."""
  query_contains: String

  """All values not containing the given string."""
  query_not_contains: String

  """All values starting with the given string."""
  query_starts_with: String

  """All values not starting with the given string."""
  query_not_starts_with: String

  """All values ending with the given string."""
  query_ends_with: String

  """All values not ending with the given string."""
  query_not_ends_with: String
  followUpObservations: String

  """All values that are not equal to given value."""
  followUpObservations_not: String

  """All values that are contained in given list."""
  followUpObservations_in: [String!]

  """All values that are not contained in given list."""
  followUpObservations_not_in: [String!]

  """All values less than the given value."""
  followUpObservations_lt: String

  """All values less than or equal the given value."""
  followUpObservations_lte: String

  """All values greater than the given value."""
  followUpObservations_gt: String

  """All values greater than or equal the given value."""
  followUpObservations_gte: String

  """All values containing the given string."""
  followUpObservations_contains: String

  """All values not containing the given string."""
  followUpObservations_not_contains: String

  """All values starting with the given string."""
  followUpObservations_starts_with: String

  """All values not starting with the given string."""
  followUpObservations_not_starts_with: String

  """All values ending with the given string."""
  followUpObservations_ends_with: String

  """All values not ending with the given string."""
  followUpObservations_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
}

type PatientRecordSubscriptionPayload {
  mutation: MutationType!
  node: PatientRecord
  updatedFields: [String!]
  previousValues: PatientRecordPreviousValues
}

input PatientRecordSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PatientRecordSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PatientRecordWhereInput
}

input PatientRecordUpdateInput {
  recordId: String
  visitNo: Int
  onArrival: String
  diagnosis: String
  Tx: String
  reportSuggestions: String
  cevsSp: Int
  cevsDp: Int
  cePr: Int
  ceRr: Int
  ceHeight: Int
  ceWeight: Int
  diagnosisAfterReport: String
  medication: String
  advice: String
  query: String
  followUpObservations: String
  patient: PatientUpdateOneRequiredInput
  case: PatientCaseUpdateOneRequiredWithoutPatientRecordInput
  medicalPractitioner: MedicalPractitionerUpdateOneRequiredInput
  sharedRecord: SharedRecordUpdateManyWithoutRecordInput
}

input PatientRecordUpdateManyDataInput {
  recordId: String
  visitNo: Int
  onArrival: String
  diagnosis: String
  Tx: String
  reportSuggestions: String
  cevsSp: Int
  cevsDp: Int
  cePr: Int
  ceRr: Int
  ceHeight: Int
  ceWeight: Int
  diagnosisAfterReport: String
  medication: String
  advice: String
  query: String
  followUpObservations: String
}

input PatientRecordUpdateManyMutationInput {
  recordId: String
  visitNo: Int
  onArrival: String
  diagnosis: String
  Tx: String
  reportSuggestions: String
  cevsSp: Int
  cevsDp: Int
  cePr: Int
  ceRr: Int
  ceHeight: Int
  ceWeight: Int
  diagnosisAfterReport: String
  medication: String
  advice: String
  query: String
  followUpObservations: String
}

input PatientRecordUpdateManyWithoutCaseInput {
  create: [PatientRecordCreateWithoutCaseInput!]
  connect: [PatientRecordWhereUniqueInput!]
  set: [PatientRecordWhereUniqueInput!]
  disconnect: [PatientRecordWhereUniqueInput!]
  delete: [PatientRecordWhereUniqueInput!]
  update: [PatientRecordUpdateWithWhereUniqueWithoutCaseInput!]
  updateMany: [PatientRecordUpdateManyWithWhereNestedInput!]
  deleteMany: [PatientRecordScalarWhereInput!]
  upsert: [PatientRecordUpsertWithWhereUniqueWithoutCaseInput!]
}

input PatientRecordUpdateManyWithWhereNestedInput {
  where: PatientRecordScalarWhereInput!
  data: PatientRecordUpdateManyDataInput!
}

input PatientRecordUpdateOneRequiredWithoutSharedRecordInput {
  create: PatientRecordCreateWithoutSharedRecordInput
  connect: PatientRecordWhereUniqueInput
  update: PatientRecordUpdateWithoutSharedRecordDataInput
  upsert: PatientRecordUpsertWithoutSharedRecordInput
}

input PatientRecordUpdateWithoutCaseDataInput {
  recordId: String
  visitNo: Int
  onArrival: String
  diagnosis: String
  Tx: String
  reportSuggestions: String
  cevsSp: Int
  cevsDp: Int
  cePr: Int
  ceRr: Int
  ceHeight: Int
  ceWeight: Int
  diagnosisAfterReport: String
  medication: String
  advice: String
  query: String
  followUpObservations: String
  patient: PatientUpdateOneRequiredInput
  medicalPractitioner: MedicalPractitionerUpdateOneRequiredInput
  sharedRecord: SharedRecordUpdateManyWithoutRecordInput
}

input PatientRecordUpdateWithoutSharedRecordDataInput {
  recordId: String
  visitNo: Int
  onArrival: String
  diagnosis: String
  Tx: String
  reportSuggestions: String
  cevsSp: Int
  cevsDp: Int
  cePr: Int
  ceRr: Int
  ceHeight: Int
  ceWeight: Int
  diagnosisAfterReport: String
  medication: String
  advice: String
  query: String
  followUpObservations: String
  patient: PatientUpdateOneRequiredInput
  case: PatientCaseUpdateOneRequiredWithoutPatientRecordInput
  medicalPractitioner: MedicalPractitionerUpdateOneRequiredInput
}

input PatientRecordUpdateWithWhereUniqueWithoutCaseInput {
  where: PatientRecordWhereUniqueInput!
  data: PatientRecordUpdateWithoutCaseDataInput!
}

input PatientRecordUpsertWithoutSharedRecordInput {
  update: PatientRecordUpdateWithoutSharedRecordDataInput!
  create: PatientRecordCreateWithoutSharedRecordInput!
}

input PatientRecordUpsertWithWhereUniqueWithoutCaseInput {
  where: PatientRecordWhereUniqueInput!
  update: PatientRecordUpdateWithoutCaseDataInput!
  create: PatientRecordCreateWithoutCaseInput!
}

input PatientRecordWhereInput {
  """Logical AND on all given filters."""
  AND: [PatientRecordWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  recordId: String

  """All values that are not equal to given value."""
  recordId_not: String

  """All values that are contained in given list."""
  recordId_in: [String!]

  """All values that are not contained in given list."""
  recordId_not_in: [String!]

  """All values less than the given value."""
  recordId_lt: String

  """All values less than or equal the given value."""
  recordId_lte: String

  """All values greater than the given value."""
  recordId_gt: String

  """All values greater than or equal the given value."""
  recordId_gte: String

  """All values containing the given string."""
  recordId_contains: String

  """All values not containing the given string."""
  recordId_not_contains: String

  """All values starting with the given string."""
  recordId_starts_with: String

  """All values not starting with the given string."""
  recordId_not_starts_with: String

  """All values ending with the given string."""
  recordId_ends_with: String

  """All values not ending with the given string."""
  recordId_not_ends_with: String
  visitNo: Int

  """All values that are not equal to given value."""
  visitNo_not: Int

  """All values that are contained in given list."""
  visitNo_in: [Int!]

  """All values that are not contained in given list."""
  visitNo_not_in: [Int!]

  """All values less than the given value."""
  visitNo_lt: Int

  """All values less than or equal the given value."""
  visitNo_lte: Int

  """All values greater than the given value."""
  visitNo_gt: Int

  """All values greater than or equal the given value."""
  visitNo_gte: Int
  onArrival: String

  """All values that are not equal to given value."""
  onArrival_not: String

  """All values that are contained in given list."""
  onArrival_in: [String!]

  """All values that are not contained in given list."""
  onArrival_not_in: [String!]

  """All values less than the given value."""
  onArrival_lt: String

  """All values less than or equal the given value."""
  onArrival_lte: String

  """All values greater than the given value."""
  onArrival_gt: String

  """All values greater than or equal the given value."""
  onArrival_gte: String

  """All values containing the given string."""
  onArrival_contains: String

  """All values not containing the given string."""
  onArrival_not_contains: String

  """All values starting with the given string."""
  onArrival_starts_with: String

  """All values not starting with the given string."""
  onArrival_not_starts_with: String

  """All values ending with the given string."""
  onArrival_ends_with: String

  """All values not ending with the given string."""
  onArrival_not_ends_with: String
  diagnosis: String

  """All values that are not equal to given value."""
  diagnosis_not: String

  """All values that are contained in given list."""
  diagnosis_in: [String!]

  """All values that are not contained in given list."""
  diagnosis_not_in: [String!]

  """All values less than the given value."""
  diagnosis_lt: String

  """All values less than or equal the given value."""
  diagnosis_lte: String

  """All values greater than the given value."""
  diagnosis_gt: String

  """All values greater than or equal the given value."""
  diagnosis_gte: String

  """All values containing the given string."""
  diagnosis_contains: String

  """All values not containing the given string."""
  diagnosis_not_contains: String

  """All values starting with the given string."""
  diagnosis_starts_with: String

  """All values not starting with the given string."""
  diagnosis_not_starts_with: String

  """All values ending with the given string."""
  diagnosis_ends_with: String

  """All values not ending with the given string."""
  diagnosis_not_ends_with: String
  Tx: String

  """All values that are not equal to given value."""
  Tx_not: String

  """All values that are contained in given list."""
  Tx_in: [String!]

  """All values that are not contained in given list."""
  Tx_not_in: [String!]

  """All values less than the given value."""
  Tx_lt: String

  """All values less than or equal the given value."""
  Tx_lte: String

  """All values greater than the given value."""
  Tx_gt: String

  """All values greater than or equal the given value."""
  Tx_gte: String

  """All values containing the given string."""
  Tx_contains: String

  """All values not containing the given string."""
  Tx_not_contains: String

  """All values starting with the given string."""
  Tx_starts_with: String

  """All values not starting with the given string."""
  Tx_not_starts_with: String

  """All values ending with the given string."""
  Tx_ends_with: String

  """All values not ending with the given string."""
  Tx_not_ends_with: String
  reportSuggestions: String

  """All values that are not equal to given value."""
  reportSuggestions_not: String

  """All values that are contained in given list."""
  reportSuggestions_in: [String!]

  """All values that are not contained in given list."""
  reportSuggestions_not_in: [String!]

  """All values less than the given value."""
  reportSuggestions_lt: String

  """All values less than or equal the given value."""
  reportSuggestions_lte: String

  """All values greater than the given value."""
  reportSuggestions_gt: String

  """All values greater than or equal the given value."""
  reportSuggestions_gte: String

  """All values containing the given string."""
  reportSuggestions_contains: String

  """All values not containing the given string."""
  reportSuggestions_not_contains: String

  """All values starting with the given string."""
  reportSuggestions_starts_with: String

  """All values not starting with the given string."""
  reportSuggestions_not_starts_with: String

  """All values ending with the given string."""
  reportSuggestions_ends_with: String

  """All values not ending with the given string."""
  reportSuggestions_not_ends_with: String
  cevsSp: Int

  """All values that are not equal to given value."""
  cevsSp_not: Int

  """All values that are contained in given list."""
  cevsSp_in: [Int!]

  """All values that are not contained in given list."""
  cevsSp_not_in: [Int!]

  """All values less than the given value."""
  cevsSp_lt: Int

  """All values less than or equal the given value."""
  cevsSp_lte: Int

  """All values greater than the given value."""
  cevsSp_gt: Int

  """All values greater than or equal the given value."""
  cevsSp_gte: Int
  cevsDp: Int

  """All values that are not equal to given value."""
  cevsDp_not: Int

  """All values that are contained in given list."""
  cevsDp_in: [Int!]

  """All values that are not contained in given list."""
  cevsDp_not_in: [Int!]

  """All values less than the given value."""
  cevsDp_lt: Int

  """All values less than or equal the given value."""
  cevsDp_lte: Int

  """All values greater than the given value."""
  cevsDp_gt: Int

  """All values greater than or equal the given value."""
  cevsDp_gte: Int
  cePr: Int

  """All values that are not equal to given value."""
  cePr_not: Int

  """All values that are contained in given list."""
  cePr_in: [Int!]

  """All values that are not contained in given list."""
  cePr_not_in: [Int!]

  """All values less than the given value."""
  cePr_lt: Int

  """All values less than or equal the given value."""
  cePr_lte: Int

  """All values greater than the given value."""
  cePr_gt: Int

  """All values greater than or equal the given value."""
  cePr_gte: Int
  ceRr: Int

  """All values that are not equal to given value."""
  ceRr_not: Int

  """All values that are contained in given list."""
  ceRr_in: [Int!]

  """All values that are not contained in given list."""
  ceRr_not_in: [Int!]

  """All values less than the given value."""
  ceRr_lt: Int

  """All values less than or equal the given value."""
  ceRr_lte: Int

  """All values greater than the given value."""
  ceRr_gt: Int

  """All values greater than or equal the given value."""
  ceRr_gte: Int
  ceHeight: Int

  """All values that are not equal to given value."""
  ceHeight_not: Int

  """All values that are contained in given list."""
  ceHeight_in: [Int!]

  """All values that are not contained in given list."""
  ceHeight_not_in: [Int!]

  """All values less than the given value."""
  ceHeight_lt: Int

  """All values less than or equal the given value."""
  ceHeight_lte: Int

  """All values greater than the given value."""
  ceHeight_gt: Int

  """All values greater than or equal the given value."""
  ceHeight_gte: Int
  ceWeight: Int

  """All values that are not equal to given value."""
  ceWeight_not: Int

  """All values that are contained in given list."""
  ceWeight_in: [Int!]

  """All values that are not contained in given list."""
  ceWeight_not_in: [Int!]

  """All values less than the given value."""
  ceWeight_lt: Int

  """All values less than or equal the given value."""
  ceWeight_lte: Int

  """All values greater than the given value."""
  ceWeight_gt: Int

  """All values greater than or equal the given value."""
  ceWeight_gte: Int
  diagnosisAfterReport: String

  """All values that are not equal to given value."""
  diagnosisAfterReport_not: String

  """All values that are contained in given list."""
  diagnosisAfterReport_in: [String!]

  """All values that are not contained in given list."""
  diagnosisAfterReport_not_in: [String!]

  """All values less than the given value."""
  diagnosisAfterReport_lt: String

  """All values less than or equal the given value."""
  diagnosisAfterReport_lte: String

  """All values greater than the given value."""
  diagnosisAfterReport_gt: String

  """All values greater than or equal the given value."""
  diagnosisAfterReport_gte: String

  """All values containing the given string."""
  diagnosisAfterReport_contains: String

  """All values not containing the given string."""
  diagnosisAfterReport_not_contains: String

  """All values starting with the given string."""
  diagnosisAfterReport_starts_with: String

  """All values not starting with the given string."""
  diagnosisAfterReport_not_starts_with: String

  """All values ending with the given string."""
  diagnosisAfterReport_ends_with: String

  """All values not ending with the given string."""
  diagnosisAfterReport_not_ends_with: String
  medication: String

  """All values that are not equal to given value."""
  medication_not: String

  """All values that are contained in given list."""
  medication_in: [String!]

  """All values that are not contained in given list."""
  medication_not_in: [String!]

  """All values less than the given value."""
  medication_lt: String

  """All values less than or equal the given value."""
  medication_lte: String

  """All values greater than the given value."""
  medication_gt: String

  """All values greater than or equal the given value."""
  medication_gte: String

  """All values containing the given string."""
  medication_contains: String

  """All values not containing the given string."""
  medication_not_contains: String

  """All values starting with the given string."""
  medication_starts_with: String

  """All values not starting with the given string."""
  medication_not_starts_with: String

  """All values ending with the given string."""
  medication_ends_with: String

  """All values not ending with the given string."""
  medication_not_ends_with: String
  advice: String

  """All values that are not equal to given value."""
  advice_not: String

  """All values that are contained in given list."""
  advice_in: [String!]

  """All values that are not contained in given list."""
  advice_not_in: [String!]

  """All values less than the given value."""
  advice_lt: String

  """All values less than or equal the given value."""
  advice_lte: String

  """All values greater than the given value."""
  advice_gt: String

  """All values greater than or equal the given value."""
  advice_gte: String

  """All values containing the given string."""
  advice_contains: String

  """All values not containing the given string."""
  advice_not_contains: String

  """All values starting with the given string."""
  advice_starts_with: String

  """All values not starting with the given string."""
  advice_not_starts_with: String

  """All values ending with the given string."""
  advice_ends_with: String

  """All values not ending with the given string."""
  advice_not_ends_with: String
  query: String

  """All values that are not equal to given value."""
  query_not: String

  """All values that are contained in given list."""
  query_in: [String!]

  """All values that are not contained in given list."""
  query_not_in: [String!]

  """All values less than the given value."""
  query_lt: String

  """All values less than or equal the given value."""
  query_lte: String

  """All values greater than the given value."""
  query_gt: String

  """All values greater than or equal the given value."""
  query_gte: String

  """All values containing the given string."""
  query_contains: String

  """All values not containing the given string."""
  query_not_contains: String

  """All values starting with the given string."""
  query_starts_with: String

  """All values not starting with the given string."""
  query_not_starts_with: String

  """All values ending with the given string."""
  query_ends_with: String

  """All values not ending with the given string."""
  query_not_ends_with: String
  followUpObservations: String

  """All values that are not equal to given value."""
  followUpObservations_not: String

  """All values that are contained in given list."""
  followUpObservations_in: [String!]

  """All values that are not contained in given list."""
  followUpObservations_not_in: [String!]

  """All values less than the given value."""
  followUpObservations_lt: String

  """All values less than or equal the given value."""
  followUpObservations_lte: String

  """All values greater than the given value."""
  followUpObservations_gt: String

  """All values greater than or equal the given value."""
  followUpObservations_gte: String

  """All values containing the given string."""
  followUpObservations_contains: String

  """All values not containing the given string."""
  followUpObservations_not_contains: String

  """All values starting with the given string."""
  followUpObservations_starts_with: String

  """All values not starting with the given string."""
  followUpObservations_not_starts_with: String

  """All values ending with the given string."""
  followUpObservations_ends_with: String

  """All values not ending with the given string."""
  followUpObservations_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  patient: PatientWhereInput
  case: PatientCaseWhereInput
  medicalPractitioner: MedicalPractitionerWhereInput
  sharedRecord_some: SharedRecordWhereInput
}

input PatientRecordWhereUniqueInput {
  id: ID
  recordId: String
}

type PatientSubscriptionPayload {
  mutation: MutationType!
  node: Patient
  updatedFields: [String!]
  previousValues: PatientPreviousValues
}

input PatientSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PatientSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PatientWhereInput
}

input PatientUpdateDataInput {
  patientId: String
  bloodGroup: String
  religion: String
  maritalStatus: MaritalStatus
  primaryLanguage: String
  birthPlace: String
  address: String
  occupation: String
  contact1: String
  contact2: String
  socioEcoStatus: String
  immunizationHistory: String
  allergyStatus: Boolean
  organDonorStatus: Boolean
  PMH: String
  DHx: String
  Ca: Boolean
  IDDM: Boolean
  NIDDM: Boolean
  COPD: Boolean
  MI: Boolean
  AF: Boolean
  user: UserUpdateOneRequiredInput
  pincode: RegionUpdateOneRequiredInput
  country: CountryUpdateOneRequiredInput
  cpId: CareProviderUpdateOneWithoutPatientInput
  insurance: InsuranceUpdateOneWithoutPatientInput
  patientCase: PatientCaseUpdateManyWithoutPatientInput
}

input PatientUpdateInput {
  patientId: String
  bloodGroup: String
  religion: String
  maritalStatus: MaritalStatus
  primaryLanguage: String
  birthPlace: String
  address: String
  occupation: String
  contact1: String
  contact2: String
  socioEcoStatus: String
  immunizationHistory: String
  allergyStatus: Boolean
  organDonorStatus: Boolean
  PMH: String
  DHx: String
  Ca: Boolean
  IDDM: Boolean
  NIDDM: Boolean
  COPD: Boolean
  MI: Boolean
  AF: Boolean
  user: UserUpdateOneRequiredInput
  pincode: RegionUpdateOneRequiredInput
  country: CountryUpdateOneRequiredInput
  cpId: CareProviderUpdateOneWithoutPatientInput
  insurance: InsuranceUpdateOneWithoutPatientInput
  patientCase: PatientCaseUpdateManyWithoutPatientInput
}

input PatientUpdateManyMutationInput {
  patientId: String
  bloodGroup: String
  religion: String
  maritalStatus: MaritalStatus
  primaryLanguage: String
  birthPlace: String
  address: String
  occupation: String
  contact1: String
  contact2: String
  socioEcoStatus: String
  immunizationHistory: String
  allergyStatus: Boolean
  organDonorStatus: Boolean
  PMH: String
  DHx: String
  Ca: Boolean
  IDDM: Boolean
  NIDDM: Boolean
  COPD: Boolean
  MI: Boolean
  AF: Boolean
}

input PatientUpdateOneRequiredInput {
  create: PatientCreateInput
  connect: PatientWhereUniqueInput
  update: PatientUpdateDataInput
  upsert: PatientUpsertNestedInput
}

input PatientUpdateOneRequiredWithoutCpIdInput {
  create: PatientCreateWithoutCpIdInput
  connect: PatientWhereUniqueInput
  update: PatientUpdateWithoutCpIdDataInput
  upsert: PatientUpsertWithoutCpIdInput
}

input PatientUpdateOneRequiredWithoutInsuranceInput {
  create: PatientCreateWithoutInsuranceInput
  connect: PatientWhereUniqueInput
  update: PatientUpdateWithoutInsuranceDataInput
  upsert: PatientUpsertWithoutInsuranceInput
}

input PatientUpdateOneRequiredWithoutPatientCaseInput {
  create: PatientCreateWithoutPatientCaseInput
  connect: PatientWhereUniqueInput
  update: PatientUpdateWithoutPatientCaseDataInput
  upsert: PatientUpsertWithoutPatientCaseInput
}

input PatientUpdateWithoutCpIdDataInput {
  patientId: String
  bloodGroup: String
  religion: String
  maritalStatus: MaritalStatus
  primaryLanguage: String
  birthPlace: String
  address: String
  occupation: String
  contact1: String
  contact2: String
  socioEcoStatus: String
  immunizationHistory: String
  allergyStatus: Boolean
  organDonorStatus: Boolean
  PMH: String
  DHx: String
  Ca: Boolean
  IDDM: Boolean
  NIDDM: Boolean
  COPD: Boolean
  MI: Boolean
  AF: Boolean
  user: UserUpdateOneRequiredInput
  pincode: RegionUpdateOneRequiredInput
  country: CountryUpdateOneRequiredInput
  insurance: InsuranceUpdateOneWithoutPatientInput
  patientCase: PatientCaseUpdateManyWithoutPatientInput
}

input PatientUpdateWithoutInsuranceDataInput {
  patientId: String
  bloodGroup: String
  religion: String
  maritalStatus: MaritalStatus
  primaryLanguage: String
  birthPlace: String
  address: String
  occupation: String
  contact1: String
  contact2: String
  socioEcoStatus: String
  immunizationHistory: String
  allergyStatus: Boolean
  organDonorStatus: Boolean
  PMH: String
  DHx: String
  Ca: Boolean
  IDDM: Boolean
  NIDDM: Boolean
  COPD: Boolean
  MI: Boolean
  AF: Boolean
  user: UserUpdateOneRequiredInput
  pincode: RegionUpdateOneRequiredInput
  country: CountryUpdateOneRequiredInput
  cpId: CareProviderUpdateOneWithoutPatientInput
  patientCase: PatientCaseUpdateManyWithoutPatientInput
}

input PatientUpdateWithoutPatientCaseDataInput {
  patientId: String
  bloodGroup: String
  religion: String
  maritalStatus: MaritalStatus
  primaryLanguage: String
  birthPlace: String
  address: String
  occupation: String
  contact1: String
  contact2: String
  socioEcoStatus: String
  immunizationHistory: String
  allergyStatus: Boolean
  organDonorStatus: Boolean
  PMH: String
  DHx: String
  Ca: Boolean
  IDDM: Boolean
  NIDDM: Boolean
  COPD: Boolean
  MI: Boolean
  AF: Boolean
  user: UserUpdateOneRequiredInput
  pincode: RegionUpdateOneRequiredInput
  country: CountryUpdateOneRequiredInput
  cpId: CareProviderUpdateOneWithoutPatientInput
  insurance: InsuranceUpdateOneWithoutPatientInput
}

input PatientUpsertNestedInput {
  update: PatientUpdateDataInput!
  create: PatientCreateInput!
}

input PatientUpsertWithoutCpIdInput {
  update: PatientUpdateWithoutCpIdDataInput!
  create: PatientCreateWithoutCpIdInput!
}

input PatientUpsertWithoutInsuranceInput {
  update: PatientUpdateWithoutInsuranceDataInput!
  create: PatientCreateWithoutInsuranceInput!
}

input PatientUpsertWithoutPatientCaseInput {
  update: PatientUpdateWithoutPatientCaseDataInput!
  create: PatientCreateWithoutPatientCaseInput!
}

input PatientWhereInput {
  """Logical AND on all given filters."""
  AND: [PatientWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  patientId: String

  """All values that are not equal to given value."""
  patientId_not: String

  """All values that are contained in given list."""
  patientId_in: [String!]

  """All values that are not contained in given list."""
  patientId_not_in: [String!]

  """All values less than the given value."""
  patientId_lt: String

  """All values less than or equal the given value."""
  patientId_lte: String

  """All values greater than the given value."""
  patientId_gt: String

  """All values greater than or equal the given value."""
  patientId_gte: String

  """All values containing the given string."""
  patientId_contains: String

  """All values not containing the given string."""
  patientId_not_contains: String

  """All values starting with the given string."""
  patientId_starts_with: String

  """All values not starting with the given string."""
  patientId_not_starts_with: String

  """All values ending with the given string."""
  patientId_ends_with: String

  """All values not ending with the given string."""
  patientId_not_ends_with: String
  bloodGroup: String

  """All values that are not equal to given value."""
  bloodGroup_not: String

  """All values that are contained in given list."""
  bloodGroup_in: [String!]

  """All values that are not contained in given list."""
  bloodGroup_not_in: [String!]

  """All values less than the given value."""
  bloodGroup_lt: String

  """All values less than or equal the given value."""
  bloodGroup_lte: String

  """All values greater than the given value."""
  bloodGroup_gt: String

  """All values greater than or equal the given value."""
  bloodGroup_gte: String

  """All values containing the given string."""
  bloodGroup_contains: String

  """All values not containing the given string."""
  bloodGroup_not_contains: String

  """All values starting with the given string."""
  bloodGroup_starts_with: String

  """All values not starting with the given string."""
  bloodGroup_not_starts_with: String

  """All values ending with the given string."""
  bloodGroup_ends_with: String

  """All values not ending with the given string."""
  bloodGroup_not_ends_with: String
  religion: String

  """All values that are not equal to given value."""
  religion_not: String

  """All values that are contained in given list."""
  religion_in: [String!]

  """All values that are not contained in given list."""
  religion_not_in: [String!]

  """All values less than the given value."""
  religion_lt: String

  """All values less than or equal the given value."""
  religion_lte: String

  """All values greater than the given value."""
  religion_gt: String

  """All values greater than or equal the given value."""
  religion_gte: String

  """All values containing the given string."""
  religion_contains: String

  """All values not containing the given string."""
  religion_not_contains: String

  """All values starting with the given string."""
  religion_starts_with: String

  """All values not starting with the given string."""
  religion_not_starts_with: String

  """All values ending with the given string."""
  religion_ends_with: String

  """All values not ending with the given string."""
  religion_not_ends_with: String
  maritalStatus: MaritalStatus

  """All values that are not equal to given value."""
  maritalStatus_not: MaritalStatus

  """All values that are contained in given list."""
  maritalStatus_in: [MaritalStatus!]

  """All values that are not contained in given list."""
  maritalStatus_not_in: [MaritalStatus!]
  primaryLanguage: String

  """All values that are not equal to given value."""
  primaryLanguage_not: String

  """All values that are contained in given list."""
  primaryLanguage_in: [String!]

  """All values that are not contained in given list."""
  primaryLanguage_not_in: [String!]

  """All values less than the given value."""
  primaryLanguage_lt: String

  """All values less than or equal the given value."""
  primaryLanguage_lte: String

  """All values greater than the given value."""
  primaryLanguage_gt: String

  """All values greater than or equal the given value."""
  primaryLanguage_gte: String

  """All values containing the given string."""
  primaryLanguage_contains: String

  """All values not containing the given string."""
  primaryLanguage_not_contains: String

  """All values starting with the given string."""
  primaryLanguage_starts_with: String

  """All values not starting with the given string."""
  primaryLanguage_not_starts_with: String

  """All values ending with the given string."""
  primaryLanguage_ends_with: String

  """All values not ending with the given string."""
  primaryLanguage_not_ends_with: String
  birthPlace: String

  """All values that are not equal to given value."""
  birthPlace_not: String

  """All values that are contained in given list."""
  birthPlace_in: [String!]

  """All values that are not contained in given list."""
  birthPlace_not_in: [String!]

  """All values less than the given value."""
  birthPlace_lt: String

  """All values less than or equal the given value."""
  birthPlace_lte: String

  """All values greater than the given value."""
  birthPlace_gt: String

  """All values greater than or equal the given value."""
  birthPlace_gte: String

  """All values containing the given string."""
  birthPlace_contains: String

  """All values not containing the given string."""
  birthPlace_not_contains: String

  """All values starting with the given string."""
  birthPlace_starts_with: String

  """All values not starting with the given string."""
  birthPlace_not_starts_with: String

  """All values ending with the given string."""
  birthPlace_ends_with: String

  """All values not ending with the given string."""
  birthPlace_not_ends_with: String
  address: String

  """All values that are not equal to given value."""
  address_not: String

  """All values that are contained in given list."""
  address_in: [String!]

  """All values that are not contained in given list."""
  address_not_in: [String!]

  """All values less than the given value."""
  address_lt: String

  """All values less than or equal the given value."""
  address_lte: String

  """All values greater than the given value."""
  address_gt: String

  """All values greater than or equal the given value."""
  address_gte: String

  """All values containing the given string."""
  address_contains: String

  """All values not containing the given string."""
  address_not_contains: String

  """All values starting with the given string."""
  address_starts_with: String

  """All values not starting with the given string."""
  address_not_starts_with: String

  """All values ending with the given string."""
  address_ends_with: String

  """All values not ending with the given string."""
  address_not_ends_with: String
  occupation: String

  """All values that are not equal to given value."""
  occupation_not: String

  """All values that are contained in given list."""
  occupation_in: [String!]

  """All values that are not contained in given list."""
  occupation_not_in: [String!]

  """All values less than the given value."""
  occupation_lt: String

  """All values less than or equal the given value."""
  occupation_lte: String

  """All values greater than the given value."""
  occupation_gt: String

  """All values greater than or equal the given value."""
  occupation_gte: String

  """All values containing the given string."""
  occupation_contains: String

  """All values not containing the given string."""
  occupation_not_contains: String

  """All values starting with the given string."""
  occupation_starts_with: String

  """All values not starting with the given string."""
  occupation_not_starts_with: String

  """All values ending with the given string."""
  occupation_ends_with: String

  """All values not ending with the given string."""
  occupation_not_ends_with: String
  contact1: String

  """All values that are not equal to given value."""
  contact1_not: String

  """All values that are contained in given list."""
  contact1_in: [String!]

  """All values that are not contained in given list."""
  contact1_not_in: [String!]

  """All values less than the given value."""
  contact1_lt: String

  """All values less than or equal the given value."""
  contact1_lte: String

  """All values greater than the given value."""
  contact1_gt: String

  """All values greater than or equal the given value."""
  contact1_gte: String

  """All values containing the given string."""
  contact1_contains: String

  """All values not containing the given string."""
  contact1_not_contains: String

  """All values starting with the given string."""
  contact1_starts_with: String

  """All values not starting with the given string."""
  contact1_not_starts_with: String

  """All values ending with the given string."""
  contact1_ends_with: String

  """All values not ending with the given string."""
  contact1_not_ends_with: String
  contact2: String

  """All values that are not equal to given value."""
  contact2_not: String

  """All values that are contained in given list."""
  contact2_in: [String!]

  """All values that are not contained in given list."""
  contact2_not_in: [String!]

  """All values less than the given value."""
  contact2_lt: String

  """All values less than or equal the given value."""
  contact2_lte: String

  """All values greater than the given value."""
  contact2_gt: String

  """All values greater than or equal the given value."""
  contact2_gte: String

  """All values containing the given string."""
  contact2_contains: String

  """All values not containing the given string."""
  contact2_not_contains: String

  """All values starting with the given string."""
  contact2_starts_with: String

  """All values not starting with the given string."""
  contact2_not_starts_with: String

  """All values ending with the given string."""
  contact2_ends_with: String

  """All values not ending with the given string."""
  contact2_not_ends_with: String
  socioEcoStatus: String

  """All values that are not equal to given value."""
  socioEcoStatus_not: String

  """All values that are contained in given list."""
  socioEcoStatus_in: [String!]

  """All values that are not contained in given list."""
  socioEcoStatus_not_in: [String!]

  """All values less than the given value."""
  socioEcoStatus_lt: String

  """All values less than or equal the given value."""
  socioEcoStatus_lte: String

  """All values greater than the given value."""
  socioEcoStatus_gt: String

  """All values greater than or equal the given value."""
  socioEcoStatus_gte: String

  """All values containing the given string."""
  socioEcoStatus_contains: String

  """All values not containing the given string."""
  socioEcoStatus_not_contains: String

  """All values starting with the given string."""
  socioEcoStatus_starts_with: String

  """All values not starting with the given string."""
  socioEcoStatus_not_starts_with: String

  """All values ending with the given string."""
  socioEcoStatus_ends_with: String

  """All values not ending with the given string."""
  socioEcoStatus_not_ends_with: String
  immunizationHistory: String

  """All values that are not equal to given value."""
  immunizationHistory_not: String

  """All values that are contained in given list."""
  immunizationHistory_in: [String!]

  """All values that are not contained in given list."""
  immunizationHistory_not_in: [String!]

  """All values less than the given value."""
  immunizationHistory_lt: String

  """All values less than or equal the given value."""
  immunizationHistory_lte: String

  """All values greater than the given value."""
  immunizationHistory_gt: String

  """All values greater than or equal the given value."""
  immunizationHistory_gte: String

  """All values containing the given string."""
  immunizationHistory_contains: String

  """All values not containing the given string."""
  immunizationHistory_not_contains: String

  """All values starting with the given string."""
  immunizationHistory_starts_with: String

  """All values not starting with the given string."""
  immunizationHistory_not_starts_with: String

  """All values ending with the given string."""
  immunizationHistory_ends_with: String

  """All values not ending with the given string."""
  immunizationHistory_not_ends_with: String
  allergyStatus: Boolean

  """All values that are not equal to given value."""
  allergyStatus_not: Boolean
  organDonorStatus: Boolean

  """All values that are not equal to given value."""
  organDonorStatus_not: Boolean
  PMH: String

  """All values that are not equal to given value."""
  PMH_not: String

  """All values that are contained in given list."""
  PMH_in: [String!]

  """All values that are not contained in given list."""
  PMH_not_in: [String!]

  """All values less than the given value."""
  PMH_lt: String

  """All values less than or equal the given value."""
  PMH_lte: String

  """All values greater than the given value."""
  PMH_gt: String

  """All values greater than or equal the given value."""
  PMH_gte: String

  """All values containing the given string."""
  PMH_contains: String

  """All values not containing the given string."""
  PMH_not_contains: String

  """All values starting with the given string."""
  PMH_starts_with: String

  """All values not starting with the given string."""
  PMH_not_starts_with: String

  """All values ending with the given string."""
  PMH_ends_with: String

  """All values not ending with the given string."""
  PMH_not_ends_with: String
  DHx: String

  """All values that are not equal to given value."""
  DHx_not: String

  """All values that are contained in given list."""
  DHx_in: [String!]

  """All values that are not contained in given list."""
  DHx_not_in: [String!]

  """All values less than the given value."""
  DHx_lt: String

  """All values less than or equal the given value."""
  DHx_lte: String

  """All values greater than the given value."""
  DHx_gt: String

  """All values greater than or equal the given value."""
  DHx_gte: String

  """All values containing the given string."""
  DHx_contains: String

  """All values not containing the given string."""
  DHx_not_contains: String

  """All values starting with the given string."""
  DHx_starts_with: String

  """All values not starting with the given string."""
  DHx_not_starts_with: String

  """All values ending with the given string."""
  DHx_ends_with: String

  """All values not ending with the given string."""
  DHx_not_ends_with: String
  Ca: Boolean

  """All values that are not equal to given value."""
  Ca_not: Boolean
  IDDM: Boolean

  """All values that are not equal to given value."""
  IDDM_not: Boolean
  NIDDM: Boolean

  """All values that are not equal to given value."""
  NIDDM_not: Boolean
  COPD: Boolean

  """All values that are not equal to given value."""
  COPD_not: Boolean
  MI: Boolean

  """All values that are not equal to given value."""
  MI_not: Boolean
  AF: Boolean

  """All values that are not equal to given value."""
  AF_not: Boolean
  registeredAt: DateTime

  """All values that are not equal to given value."""
  registeredAt_not: DateTime

  """All values that are contained in given list."""
  registeredAt_in: [DateTime!]

  """All values that are not contained in given list."""
  registeredAt_not_in: [DateTime!]

  """All values less than the given value."""
  registeredAt_lt: DateTime

  """All values less than or equal the given value."""
  registeredAt_lte: DateTime

  """All values greater than the given value."""
  registeredAt_gt: DateTime

  """All values greater than or equal the given value."""
  registeredAt_gte: DateTime
  user: UserWhereInput
  pincode: RegionWhereInput
  country: CountryWhereInput
  cpId: CareProviderWhereInput
  insurance: InsuranceWhereInput
  patientCase_some: PatientCaseWhereInput
}

input PatientWhereUniqueInput {
  id: ID
  patientId: String
}

type Query {
  blockChains(where: BlockChainWhereInput, orderBy: BlockChainOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [BlockChain]!
  databaseAdmins(where: DatabaseAdminWhereInput, orderBy: DatabaseAdminOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [DatabaseAdmin]!
  careProviders(where: CareProviderWhereInput, orderBy: CareProviderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CareProvider]!
  insurances(where: InsuranceWhereInput, orderBy: InsuranceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Insurance]!
  patientCases(where: PatientCaseWhereInput, orderBy: PatientCaseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PatientCase]!
  patientRecords(where: PatientRecordWhereInput, orderBy: PatientRecordOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PatientRecord]!
  sharedCases(where: SharedCaseWhereInput, orderBy: SharedCaseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SharedCase]!
  sharedRecords(where: SharedRecordWhereInput, orderBy: SharedRecordOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SharedRecord]!
  patients(where: PatientWhereInput, orderBy: PatientOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Patient]!
  countries(where: CountryWhereInput, orderBy: CountryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Country]!
  iCDSubCodes(where: ICDSubCodeWhereInput, orderBy: ICDSubCodeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ICDSubCode]!
  regions(where: RegionWhereInput, orderBy: RegionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Region]!
  medicalPractitioners(where: MedicalPractitionerWhereInput, orderBy: MedicalPractitionerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [MedicalPractitioner]!
  hospitals(where: HospitalWhereInput, orderBy: HospitalOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Hospital]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  iCDCodes(where: ICDCodeWhereInput, orderBy: ICDCodeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ICDCode]!
  blocks(where: BlockWhereInput, orderBy: BlockOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Block]!
  blockChain(where: BlockChainWhereUniqueInput!): BlockChain
  databaseAdmin(where: DatabaseAdminWhereUniqueInput!): DatabaseAdmin
  careProvider(where: CareProviderWhereUniqueInput!): CareProvider
  insurance(where: InsuranceWhereUniqueInput!): Insurance
  patientCase(where: PatientCaseWhereUniqueInput!): PatientCase
  patientRecord(where: PatientRecordWhereUniqueInput!): PatientRecord
  sharedCase(where: SharedCaseWhereUniqueInput!): SharedCase
  sharedRecord(where: SharedRecordWhereUniqueInput!): SharedRecord
  patient(where: PatientWhereUniqueInput!): Patient
  country(where: CountryWhereUniqueInput!): Country
  iCDSubCode(where: ICDSubCodeWhereUniqueInput!): ICDSubCode
  region(where: RegionWhereUniqueInput!): Region
  medicalPractitioner(where: MedicalPractitionerWhereUniqueInput!): MedicalPractitioner
  hospital(where: HospitalWhereUniqueInput!): Hospital
  user(where: UserWhereUniqueInput!): User
  iCDCode(where: ICDCodeWhereUniqueInput!): ICDCode
  block(where: BlockWhereUniqueInput!): Block
  blockChainsConnection(where: BlockChainWhereInput, orderBy: BlockChainOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BlockChainConnection!
  databaseAdminsConnection(where: DatabaseAdminWhereInput, orderBy: DatabaseAdminOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DatabaseAdminConnection!
  careProvidersConnection(where: CareProviderWhereInput, orderBy: CareProviderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CareProviderConnection!
  insurancesConnection(where: InsuranceWhereInput, orderBy: InsuranceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): InsuranceConnection!
  patientCasesConnection(where: PatientCaseWhereInput, orderBy: PatientCaseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PatientCaseConnection!
  patientRecordsConnection(where: PatientRecordWhereInput, orderBy: PatientRecordOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PatientRecordConnection!
  sharedCasesConnection(where: SharedCaseWhereInput, orderBy: SharedCaseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SharedCaseConnection!
  sharedRecordsConnection(where: SharedRecordWhereInput, orderBy: SharedRecordOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SharedRecordConnection!
  patientsConnection(where: PatientWhereInput, orderBy: PatientOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PatientConnection!
  countriesConnection(where: CountryWhereInput, orderBy: CountryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CountryConnection!
  iCDSubCodesConnection(where: ICDSubCodeWhereInput, orderBy: ICDSubCodeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ICDSubCodeConnection!
  regionsConnection(where: RegionWhereInput, orderBy: RegionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RegionConnection!
  medicalPractitionersConnection(where: MedicalPractitionerWhereInput, orderBy: MedicalPractitionerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MedicalPractitionerConnection!
  hospitalsConnection(where: HospitalWhereInput, orderBy: HospitalOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): HospitalConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  iCDCodesConnection(where: ICDCodeWhereInput, orderBy: ICDCodeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ICDCodeConnection!
  blocksConnection(where: BlockWhereInput, orderBy: BlockOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BlockConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Region implements Node {
  id: ID!
  pincode: Int!
  region: String!
}

"""A connection to a list of items."""
type RegionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [RegionEdge]!
  aggregate: AggregateRegion!
}

input RegionCreateInput {
  id: ID
  pincode: Int!
  region: String!
}

input RegionCreateOneInput {
  create: RegionCreateInput
  connect: RegionWhereUniqueInput
}

"""An edge in a connection."""
type RegionEdge {
  """The item at the end of the edge."""
  node: Region!

  """A cursor for use in pagination."""
  cursor: String!
}

enum RegionOrderByInput {
  id_ASC
  id_DESC
  pincode_ASC
  pincode_DESC
  region_ASC
  region_DESC
}

type RegionPreviousValues {
  id: ID!
  pincode: Int!
  region: String!
}

type RegionSubscriptionPayload {
  mutation: MutationType!
  node: Region
  updatedFields: [String!]
  previousValues: RegionPreviousValues
}

input RegionSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [RegionSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: RegionWhereInput
}

input RegionUpdateDataInput {
  pincode: Int
  region: String
}

input RegionUpdateInput {
  pincode: Int
  region: String
}

input RegionUpdateManyMutationInput {
  pincode: Int
  region: String
}

input RegionUpdateOneRequiredInput {
  create: RegionCreateInput
  connect: RegionWhereUniqueInput
  update: RegionUpdateDataInput
  upsert: RegionUpsertNestedInput
}

input RegionUpsertNestedInput {
  update: RegionUpdateDataInput!
  create: RegionCreateInput!
}

input RegionWhereInput {
  """Logical AND on all given filters."""
  AND: [RegionWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  pincode: Int

  """All values that are not equal to given value."""
  pincode_not: Int

  """All values that are contained in given list."""
  pincode_in: [Int!]

  """All values that are not contained in given list."""
  pincode_not_in: [Int!]

  """All values less than the given value."""
  pincode_lt: Int

  """All values less than or equal the given value."""
  pincode_lte: Int

  """All values greater than the given value."""
  pincode_gt: Int

  """All values greater than or equal the given value."""
  pincode_gte: Int
  region: String

  """All values that are not equal to given value."""
  region_not: String

  """All values that are contained in given list."""
  region_in: [String!]

  """All values that are not contained in given list."""
  region_not_in: [String!]

  """All values less than the given value."""
  region_lt: String

  """All values less than or equal the given value."""
  region_lte: String

  """All values greater than the given value."""
  region_gt: String

  """All values greater than or equal the given value."""
  region_gte: String

  """All values containing the given string."""
  region_contains: String

  """All values not containing the given string."""
  region_not_contains: String

  """All values starting with the given string."""
  region_starts_with: String

  """All values not starting with the given string."""
  region_not_starts_with: String

  """All values ending with the given string."""
  region_ends_with: String

  """All values not ending with the given string."""
  region_not_ends_with: String
}

input RegionWhereUniqueInput {
  id: ID
  pincode: Int
}

type SharedCase {
  sharedCaseId: ID!
  case: PatientCase!
  sender: MedicalPractitioner!
  receiver: MedicalPractitioner!
  HL7: String!
  sharedAt: DateTime!
}

"""A connection to a list of items."""
type SharedCaseConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SharedCaseEdge]!
  aggregate: AggregateSharedCase!
}

input SharedCaseCreateInput {
  sharedCaseId: ID
  HL7: String!
  case: PatientCaseCreateOneWithoutSharedCaseInput!
  sender: MedicalPractitionerCreateOneInput!
  receiver: MedicalPractitionerCreateOneInput!
}

input SharedCaseCreateManyWithoutCaseInput {
  create: [SharedCaseCreateWithoutCaseInput!]
  connect: [SharedCaseWhereUniqueInput!]
}

input SharedCaseCreateWithoutCaseInput {
  sharedCaseId: ID
  HL7: String!
  sender: MedicalPractitionerCreateOneInput!
  receiver: MedicalPractitionerCreateOneInput!
}

"""An edge in a connection."""
type SharedCaseEdge {
  """The item at the end of the edge."""
  node: SharedCase!

  """A cursor for use in pagination."""
  cursor: String!
}

enum SharedCaseOrderByInput {
  sharedCaseId_ASC
  sharedCaseId_DESC
  HL7_ASC
  HL7_DESC
  sharedAt_ASC
  sharedAt_DESC
}

type SharedCasePreviousValues {
  sharedCaseId: ID!
  HL7: String!
  sharedAt: DateTime!
}

input SharedCaseScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [SharedCaseScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [SharedCaseScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SharedCaseScalarWhereInput!]
  sharedCaseId: ID

  """All values that are not equal to given value."""
  sharedCaseId_not: ID

  """All values that are contained in given list."""
  sharedCaseId_in: [ID!]

  """All values that are not contained in given list."""
  sharedCaseId_not_in: [ID!]

  """All values less than the given value."""
  sharedCaseId_lt: ID

  """All values less than or equal the given value."""
  sharedCaseId_lte: ID

  """All values greater than the given value."""
  sharedCaseId_gt: ID

  """All values greater than or equal the given value."""
  sharedCaseId_gte: ID

  """All values containing the given string."""
  sharedCaseId_contains: ID

  """All values not containing the given string."""
  sharedCaseId_not_contains: ID

  """All values starting with the given string."""
  sharedCaseId_starts_with: ID

  """All values not starting with the given string."""
  sharedCaseId_not_starts_with: ID

  """All values ending with the given string."""
  sharedCaseId_ends_with: ID

  """All values not ending with the given string."""
  sharedCaseId_not_ends_with: ID
  HL7: String

  """All values that are not equal to given value."""
  HL7_not: String

  """All values that are contained in given list."""
  HL7_in: [String!]

  """All values that are not contained in given list."""
  HL7_not_in: [String!]

  """All values less than the given value."""
  HL7_lt: String

  """All values less than or equal the given value."""
  HL7_lte: String

  """All values greater than the given value."""
  HL7_gt: String

  """All values greater than or equal the given value."""
  HL7_gte: String

  """All values containing the given string."""
  HL7_contains: String

  """All values not containing the given string."""
  HL7_not_contains: String

  """All values starting with the given string."""
  HL7_starts_with: String

  """All values not starting with the given string."""
  HL7_not_starts_with: String

  """All values ending with the given string."""
  HL7_ends_with: String

  """All values not ending with the given string."""
  HL7_not_ends_with: String
  sharedAt: DateTime

  """All values that are not equal to given value."""
  sharedAt_not: DateTime

  """All values that are contained in given list."""
  sharedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  sharedAt_not_in: [DateTime!]

  """All values less than the given value."""
  sharedAt_lt: DateTime

  """All values less than or equal the given value."""
  sharedAt_lte: DateTime

  """All values greater than the given value."""
  sharedAt_gt: DateTime

  """All values greater than or equal the given value."""
  sharedAt_gte: DateTime
}

type SharedCaseSubscriptionPayload {
  mutation: MutationType!
  node: SharedCase
  updatedFields: [String!]
  previousValues: SharedCasePreviousValues
}

input SharedCaseSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SharedCaseSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SharedCaseWhereInput
}

input SharedCaseUpdateInput {
  HL7: String
  case: PatientCaseUpdateOneRequiredWithoutSharedCaseInput
  sender: MedicalPractitionerUpdateOneRequiredInput
  receiver: MedicalPractitionerUpdateOneRequiredInput
}

input SharedCaseUpdateManyDataInput {
  HL7: String
}

input SharedCaseUpdateManyMutationInput {
  HL7: String
}

input SharedCaseUpdateManyWithoutCaseInput {
  create: [SharedCaseCreateWithoutCaseInput!]
  connect: [SharedCaseWhereUniqueInput!]
  set: [SharedCaseWhereUniqueInput!]
  disconnect: [SharedCaseWhereUniqueInput!]
  delete: [SharedCaseWhereUniqueInput!]
  update: [SharedCaseUpdateWithWhereUniqueWithoutCaseInput!]
  updateMany: [SharedCaseUpdateManyWithWhereNestedInput!]
  deleteMany: [SharedCaseScalarWhereInput!]
  upsert: [SharedCaseUpsertWithWhereUniqueWithoutCaseInput!]
}

input SharedCaseUpdateManyWithWhereNestedInput {
  where: SharedCaseScalarWhereInput!
  data: SharedCaseUpdateManyDataInput!
}

input SharedCaseUpdateWithoutCaseDataInput {
  HL7: String
  sender: MedicalPractitionerUpdateOneRequiredInput
  receiver: MedicalPractitionerUpdateOneRequiredInput
}

input SharedCaseUpdateWithWhereUniqueWithoutCaseInput {
  where: SharedCaseWhereUniqueInput!
  data: SharedCaseUpdateWithoutCaseDataInput!
}

input SharedCaseUpsertWithWhereUniqueWithoutCaseInput {
  where: SharedCaseWhereUniqueInput!
  update: SharedCaseUpdateWithoutCaseDataInput!
  create: SharedCaseCreateWithoutCaseInput!
}

input SharedCaseWhereInput {
  """Logical AND on all given filters."""
  AND: [SharedCaseWhereInput!]
  sharedCaseId: ID

  """All values that are not equal to given value."""
  sharedCaseId_not: ID

  """All values that are contained in given list."""
  sharedCaseId_in: [ID!]

  """All values that are not contained in given list."""
  sharedCaseId_not_in: [ID!]

  """All values less than the given value."""
  sharedCaseId_lt: ID

  """All values less than or equal the given value."""
  sharedCaseId_lte: ID

  """All values greater than the given value."""
  sharedCaseId_gt: ID

  """All values greater than or equal the given value."""
  sharedCaseId_gte: ID

  """All values containing the given string."""
  sharedCaseId_contains: ID

  """All values not containing the given string."""
  sharedCaseId_not_contains: ID

  """All values starting with the given string."""
  sharedCaseId_starts_with: ID

  """All values not starting with the given string."""
  sharedCaseId_not_starts_with: ID

  """All values ending with the given string."""
  sharedCaseId_ends_with: ID

  """All values not ending with the given string."""
  sharedCaseId_not_ends_with: ID
  HL7: String

  """All values that are not equal to given value."""
  HL7_not: String

  """All values that are contained in given list."""
  HL7_in: [String!]

  """All values that are not contained in given list."""
  HL7_not_in: [String!]

  """All values less than the given value."""
  HL7_lt: String

  """All values less than or equal the given value."""
  HL7_lte: String

  """All values greater than the given value."""
  HL7_gt: String

  """All values greater than or equal the given value."""
  HL7_gte: String

  """All values containing the given string."""
  HL7_contains: String

  """All values not containing the given string."""
  HL7_not_contains: String

  """All values starting with the given string."""
  HL7_starts_with: String

  """All values not starting with the given string."""
  HL7_not_starts_with: String

  """All values ending with the given string."""
  HL7_ends_with: String

  """All values not ending with the given string."""
  HL7_not_ends_with: String
  sharedAt: DateTime

  """All values that are not equal to given value."""
  sharedAt_not: DateTime

  """All values that are contained in given list."""
  sharedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  sharedAt_not_in: [DateTime!]

  """All values less than the given value."""
  sharedAt_lt: DateTime

  """All values less than or equal the given value."""
  sharedAt_lte: DateTime

  """All values greater than the given value."""
  sharedAt_gt: DateTime

  """All values greater than or equal the given value."""
  sharedAt_gte: DateTime
  case: PatientCaseWhereInput
  sender: MedicalPractitionerWhereInput
  receiver: MedicalPractitionerWhereInput
}

input SharedCaseWhereUniqueInput {
  sharedCaseId: ID
}

type SharedRecord {
  sharedRecordId: ID!
  record: PatientRecord!
  case: PatientCase!
  sender: MedicalPractitioner!
  receiver: MedicalPractitioner!
  HL7: String!
  sharedAt: DateTime!
}

"""A connection to a list of items."""
type SharedRecordConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SharedRecordEdge]!
  aggregate: AggregateSharedRecord!
}

input SharedRecordCreateInput {
  sharedRecordId: ID
  HL7: String!
  record: PatientRecordCreateOneWithoutSharedRecordInput!
  case: PatientCaseCreateOneWithoutSharedRecordInput!
  sender: MedicalPractitionerCreateOneInput!
  receiver: MedicalPractitionerCreateOneInput!
}

input SharedRecordCreateManyWithoutCaseInput {
  create: [SharedRecordCreateWithoutCaseInput!]
  connect: [SharedRecordWhereUniqueInput!]
}

input SharedRecordCreateManyWithoutRecordInput {
  create: [SharedRecordCreateWithoutRecordInput!]
  connect: [SharedRecordWhereUniqueInput!]
}

input SharedRecordCreateWithoutCaseInput {
  sharedRecordId: ID
  HL7: String!
  record: PatientRecordCreateOneWithoutSharedRecordInput!
  sender: MedicalPractitionerCreateOneInput!
  receiver: MedicalPractitionerCreateOneInput!
}

input SharedRecordCreateWithoutRecordInput {
  sharedRecordId: ID
  HL7: String!
  case: PatientCaseCreateOneWithoutSharedRecordInput!
  sender: MedicalPractitionerCreateOneInput!
  receiver: MedicalPractitionerCreateOneInput!
}

"""An edge in a connection."""
type SharedRecordEdge {
  """The item at the end of the edge."""
  node: SharedRecord!

  """A cursor for use in pagination."""
  cursor: String!
}

enum SharedRecordOrderByInput {
  sharedRecordId_ASC
  sharedRecordId_DESC
  HL7_ASC
  HL7_DESC
  sharedAt_ASC
  sharedAt_DESC
}

type SharedRecordPreviousValues {
  sharedRecordId: ID!
  HL7: String!
  sharedAt: DateTime!
}

input SharedRecordScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [SharedRecordScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [SharedRecordScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SharedRecordScalarWhereInput!]
  sharedRecordId: ID

  """All values that are not equal to given value."""
  sharedRecordId_not: ID

  """All values that are contained in given list."""
  sharedRecordId_in: [ID!]

  """All values that are not contained in given list."""
  sharedRecordId_not_in: [ID!]

  """All values less than the given value."""
  sharedRecordId_lt: ID

  """All values less than or equal the given value."""
  sharedRecordId_lte: ID

  """All values greater than the given value."""
  sharedRecordId_gt: ID

  """All values greater than or equal the given value."""
  sharedRecordId_gte: ID

  """All values containing the given string."""
  sharedRecordId_contains: ID

  """All values not containing the given string."""
  sharedRecordId_not_contains: ID

  """All values starting with the given string."""
  sharedRecordId_starts_with: ID

  """All values not starting with the given string."""
  sharedRecordId_not_starts_with: ID

  """All values ending with the given string."""
  sharedRecordId_ends_with: ID

  """All values not ending with the given string."""
  sharedRecordId_not_ends_with: ID
  HL7: String

  """All values that are not equal to given value."""
  HL7_not: String

  """All values that are contained in given list."""
  HL7_in: [String!]

  """All values that are not contained in given list."""
  HL7_not_in: [String!]

  """All values less than the given value."""
  HL7_lt: String

  """All values less than or equal the given value."""
  HL7_lte: String

  """All values greater than the given value."""
  HL7_gt: String

  """All values greater than or equal the given value."""
  HL7_gte: String

  """All values containing the given string."""
  HL7_contains: String

  """All values not containing the given string."""
  HL7_not_contains: String

  """All values starting with the given string."""
  HL7_starts_with: String

  """All values not starting with the given string."""
  HL7_not_starts_with: String

  """All values ending with the given string."""
  HL7_ends_with: String

  """All values not ending with the given string."""
  HL7_not_ends_with: String
  sharedAt: DateTime

  """All values that are not equal to given value."""
  sharedAt_not: DateTime

  """All values that are contained in given list."""
  sharedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  sharedAt_not_in: [DateTime!]

  """All values less than the given value."""
  sharedAt_lt: DateTime

  """All values less than or equal the given value."""
  sharedAt_lte: DateTime

  """All values greater than the given value."""
  sharedAt_gt: DateTime

  """All values greater than or equal the given value."""
  sharedAt_gte: DateTime
}

type SharedRecordSubscriptionPayload {
  mutation: MutationType!
  node: SharedRecord
  updatedFields: [String!]
  previousValues: SharedRecordPreviousValues
}

input SharedRecordSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SharedRecordSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SharedRecordWhereInput
}

input SharedRecordUpdateInput {
  HL7: String
  record: PatientRecordUpdateOneRequiredWithoutSharedRecordInput
  case: PatientCaseUpdateOneRequiredWithoutSharedRecordInput
  sender: MedicalPractitionerUpdateOneRequiredInput
  receiver: MedicalPractitionerUpdateOneRequiredInput
}

input SharedRecordUpdateManyDataInput {
  HL7: String
}

input SharedRecordUpdateManyMutationInput {
  HL7: String
}

input SharedRecordUpdateManyWithoutCaseInput {
  create: [SharedRecordCreateWithoutCaseInput!]
  connect: [SharedRecordWhereUniqueInput!]
  set: [SharedRecordWhereUniqueInput!]
  disconnect: [SharedRecordWhereUniqueInput!]
  delete: [SharedRecordWhereUniqueInput!]
  update: [SharedRecordUpdateWithWhereUniqueWithoutCaseInput!]
  updateMany: [SharedRecordUpdateManyWithWhereNestedInput!]
  deleteMany: [SharedRecordScalarWhereInput!]
  upsert: [SharedRecordUpsertWithWhereUniqueWithoutCaseInput!]
}

input SharedRecordUpdateManyWithoutRecordInput {
  create: [SharedRecordCreateWithoutRecordInput!]
  connect: [SharedRecordWhereUniqueInput!]
  set: [SharedRecordWhereUniqueInput!]
  disconnect: [SharedRecordWhereUniqueInput!]
  delete: [SharedRecordWhereUniqueInput!]
  update: [SharedRecordUpdateWithWhereUniqueWithoutRecordInput!]
  updateMany: [SharedRecordUpdateManyWithWhereNestedInput!]
  deleteMany: [SharedRecordScalarWhereInput!]
  upsert: [SharedRecordUpsertWithWhereUniqueWithoutRecordInput!]
}

input SharedRecordUpdateManyWithWhereNestedInput {
  where: SharedRecordScalarWhereInput!
  data: SharedRecordUpdateManyDataInput!
}

input SharedRecordUpdateWithoutCaseDataInput {
  HL7: String
  record: PatientRecordUpdateOneRequiredWithoutSharedRecordInput
  sender: MedicalPractitionerUpdateOneRequiredInput
  receiver: MedicalPractitionerUpdateOneRequiredInput
}

input SharedRecordUpdateWithoutRecordDataInput {
  HL7: String
  case: PatientCaseUpdateOneRequiredWithoutSharedRecordInput
  sender: MedicalPractitionerUpdateOneRequiredInput
  receiver: MedicalPractitionerUpdateOneRequiredInput
}

input SharedRecordUpdateWithWhereUniqueWithoutCaseInput {
  where: SharedRecordWhereUniqueInput!
  data: SharedRecordUpdateWithoutCaseDataInput!
}

input SharedRecordUpdateWithWhereUniqueWithoutRecordInput {
  where: SharedRecordWhereUniqueInput!
  data: SharedRecordUpdateWithoutRecordDataInput!
}

input SharedRecordUpsertWithWhereUniqueWithoutCaseInput {
  where: SharedRecordWhereUniqueInput!
  update: SharedRecordUpdateWithoutCaseDataInput!
  create: SharedRecordCreateWithoutCaseInput!
}

input SharedRecordUpsertWithWhereUniqueWithoutRecordInput {
  where: SharedRecordWhereUniqueInput!
  update: SharedRecordUpdateWithoutRecordDataInput!
  create: SharedRecordCreateWithoutRecordInput!
}

input SharedRecordWhereInput {
  """Logical AND on all given filters."""
  AND: [SharedRecordWhereInput!]
  sharedRecordId: ID

  """All values that are not equal to given value."""
  sharedRecordId_not: ID

  """All values that are contained in given list."""
  sharedRecordId_in: [ID!]

  """All values that are not contained in given list."""
  sharedRecordId_not_in: [ID!]

  """All values less than the given value."""
  sharedRecordId_lt: ID

  """All values less than or equal the given value."""
  sharedRecordId_lte: ID

  """All values greater than the given value."""
  sharedRecordId_gt: ID

  """All values greater than or equal the given value."""
  sharedRecordId_gte: ID

  """All values containing the given string."""
  sharedRecordId_contains: ID

  """All values not containing the given string."""
  sharedRecordId_not_contains: ID

  """All values starting with the given string."""
  sharedRecordId_starts_with: ID

  """All values not starting with the given string."""
  sharedRecordId_not_starts_with: ID

  """All values ending with the given string."""
  sharedRecordId_ends_with: ID

  """All values not ending with the given string."""
  sharedRecordId_not_ends_with: ID
  HL7: String

  """All values that are not equal to given value."""
  HL7_not: String

  """All values that are contained in given list."""
  HL7_in: [String!]

  """All values that are not contained in given list."""
  HL7_not_in: [String!]

  """All values less than the given value."""
  HL7_lt: String

  """All values less than or equal the given value."""
  HL7_lte: String

  """All values greater than the given value."""
  HL7_gt: String

  """All values greater than or equal the given value."""
  HL7_gte: String

  """All values containing the given string."""
  HL7_contains: String

  """All values not containing the given string."""
  HL7_not_contains: String

  """All values starting with the given string."""
  HL7_starts_with: String

  """All values not starting with the given string."""
  HL7_not_starts_with: String

  """All values ending with the given string."""
  HL7_ends_with: String

  """All values not ending with the given string."""
  HL7_not_ends_with: String
  sharedAt: DateTime

  """All values that are not equal to given value."""
  sharedAt_not: DateTime

  """All values that are contained in given list."""
  sharedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  sharedAt_not_in: [DateTime!]

  """All values less than the given value."""
  sharedAt_lt: DateTime

  """All values less than or equal the given value."""
  sharedAt_lte: DateTime

  """All values greater than the given value."""
  sharedAt_gt: DateTime

  """All values greater than or equal the given value."""
  sharedAt_gte: DateTime
  record: PatientRecordWhereInput
  case: PatientCaseWhereInput
  sender: MedicalPractitionerWhereInput
  receiver: MedicalPractitionerWhereInput
}

input SharedRecordWhereUniqueInput {
  sharedRecordId: ID
}

type Subscription {
  blockChain(where: BlockChainSubscriptionWhereInput): BlockChainSubscriptionPayload
  databaseAdmin(where: DatabaseAdminSubscriptionWhereInput): DatabaseAdminSubscriptionPayload
  careProvider(where: CareProviderSubscriptionWhereInput): CareProviderSubscriptionPayload
  insurance(where: InsuranceSubscriptionWhereInput): InsuranceSubscriptionPayload
  patientCase(where: PatientCaseSubscriptionWhereInput): PatientCaseSubscriptionPayload
  patientRecord(where: PatientRecordSubscriptionWhereInput): PatientRecordSubscriptionPayload
  sharedCase(where: SharedCaseSubscriptionWhereInput): SharedCaseSubscriptionPayload
  sharedRecord(where: SharedRecordSubscriptionWhereInput): SharedRecordSubscriptionPayload
  patient(where: PatientSubscriptionWhereInput): PatientSubscriptionPayload
  country(where: CountrySubscriptionWhereInput): CountrySubscriptionPayload
  iCDSubCode(where: ICDSubCodeSubscriptionWhereInput): ICDSubCodeSubscriptionPayload
  region(where: RegionSubscriptionWhereInput): RegionSubscriptionPayload
  medicalPractitioner(where: MedicalPractitionerSubscriptionWhereInput): MedicalPractitionerSubscriptionPayload
  hospital(where: HospitalSubscriptionWhereInput): HospitalSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  iCDCode(where: ICDCodeSubscriptionWhereInput): ICDCodeSubscriptionPayload
  block(where: BlockSubscriptionWhereInput): BlockSubscriptionPayload
}

type User implements Node {
  id: ID!
  firstName: String!
  middleName: String!
  lastName: String!
  dob: DateTime!
  email: String!
  sex: Gender!
  password: String!
  role: UserType!
  isAdmin: Boolean!
  verified: Boolean!
  publicHash: String!
  privateHash: String!
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  firstName: String!
  middleName: String!
  lastName: String!
  dob: DateTime!
  email: String!
  sex: Gender!
  password: String!
  role: UserType!
  isAdmin: Boolean!
  verified: Boolean!
  publicHash: String!
  privateHash: String!
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  firstName_ASC
  firstName_DESC
  middleName_ASC
  middleName_DESC
  lastName_ASC
  lastName_DESC
  dob_ASC
  dob_DESC
  email_ASC
  email_DESC
  sex_ASC
  sex_DESC
  password_ASC
  password_DESC
  role_ASC
  role_DESC
  isAdmin_ASC
  isAdmin_DESC
  verified_ASC
  verified_DESC
  publicHash_ASC
  publicHash_DESC
  privateHash_ASC
  privateHash_DESC
}

type UserPreviousValues {
  id: ID!
  firstName: String!
  middleName: String!
  lastName: String!
  dob: DateTime!
  email: String!
  sex: Gender!
  password: String!
  role: UserType!
  isAdmin: Boolean!
  verified: Boolean!
  publicHash: String!
  privateHash: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

enum UserType {
  DatabaseAdmin
  MedicalPractitioner
  Patient
}

input UserUpdateDataInput {
  firstName: String
  middleName: String
  lastName: String
  dob: DateTime
  email: String
  sex: Gender
  password: String
  role: UserType
  isAdmin: Boolean
  verified: Boolean
  publicHash: String
  privateHash: String
}

input UserUpdateInput {
  firstName: String
  middleName: String
  lastName: String
  dob: DateTime
  email: String
  sex: Gender
  password: String
  role: UserType
  isAdmin: Boolean
  verified: Boolean
  publicHash: String
  privateHash: String
}

input UserUpdateManyMutationInput {
  firstName: String
  middleName: String
  lastName: String
  dob: DateTime
  email: String
  sex: Gender
  password: String
  role: UserType
  isAdmin: Boolean
  verified: Boolean
  publicHash: String
  privateHash: String
}

input UserUpdateOneRequiredInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  firstName: String

  """All values that are not equal to given value."""
  firstName_not: String

  """All values that are contained in given list."""
  firstName_in: [String!]

  """All values that are not contained in given list."""
  firstName_not_in: [String!]

  """All values less than the given value."""
  firstName_lt: String

  """All values less than or equal the given value."""
  firstName_lte: String

  """All values greater than the given value."""
  firstName_gt: String

  """All values greater than or equal the given value."""
  firstName_gte: String

  """All values containing the given string."""
  firstName_contains: String

  """All values not containing the given string."""
  firstName_not_contains: String

  """All values starting with the given string."""
  firstName_starts_with: String

  """All values not starting with the given string."""
  firstName_not_starts_with: String

  """All values ending with the given string."""
  firstName_ends_with: String

  """All values not ending with the given string."""
  firstName_not_ends_with: String
  middleName: String

  """All values that are not equal to given value."""
  middleName_not: String

  """All values that are contained in given list."""
  middleName_in: [String!]

  """All values that are not contained in given list."""
  middleName_not_in: [String!]

  """All values less than the given value."""
  middleName_lt: String

  """All values less than or equal the given value."""
  middleName_lte: String

  """All values greater than the given value."""
  middleName_gt: String

  """All values greater than or equal the given value."""
  middleName_gte: String

  """All values containing the given string."""
  middleName_contains: String

  """All values not containing the given string."""
  middleName_not_contains: String

  """All values starting with the given string."""
  middleName_starts_with: String

  """All values not starting with the given string."""
  middleName_not_starts_with: String

  """All values ending with the given string."""
  middleName_ends_with: String

  """All values not ending with the given string."""
  middleName_not_ends_with: String
  lastName: String

  """All values that are not equal to given value."""
  lastName_not: String

  """All values that are contained in given list."""
  lastName_in: [String!]

  """All values that are not contained in given list."""
  lastName_not_in: [String!]

  """All values less than the given value."""
  lastName_lt: String

  """All values less than or equal the given value."""
  lastName_lte: String

  """All values greater than the given value."""
  lastName_gt: String

  """All values greater than or equal the given value."""
  lastName_gte: String

  """All values containing the given string."""
  lastName_contains: String

  """All values not containing the given string."""
  lastName_not_contains: String

  """All values starting with the given string."""
  lastName_starts_with: String

  """All values not starting with the given string."""
  lastName_not_starts_with: String

  """All values ending with the given string."""
  lastName_ends_with: String

  """All values not ending with the given string."""
  lastName_not_ends_with: String
  dob: DateTime

  """All values that are not equal to given value."""
  dob_not: DateTime

  """All values that are contained in given list."""
  dob_in: [DateTime!]

  """All values that are not contained in given list."""
  dob_not_in: [DateTime!]

  """All values less than the given value."""
  dob_lt: DateTime

  """All values less than or equal the given value."""
  dob_lte: DateTime

  """All values greater than the given value."""
  dob_gt: DateTime

  """All values greater than or equal the given value."""
  dob_gte: DateTime
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  sex: Gender

  """All values that are not equal to given value."""
  sex_not: Gender

  """All values that are contained in given list."""
  sex_in: [Gender!]

  """All values that are not contained in given list."""
  sex_not_in: [Gender!]
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  role: UserType

  """All values that are not equal to given value."""
  role_not: UserType

  """All values that are contained in given list."""
  role_in: [UserType!]

  """All values that are not contained in given list."""
  role_not_in: [UserType!]
  isAdmin: Boolean

  """All values that are not equal to given value."""
  isAdmin_not: Boolean
  verified: Boolean

  """All values that are not equal to given value."""
  verified_not: Boolean
  publicHash: String

  """All values that are not equal to given value."""
  publicHash_not: String

  """All values that are contained in given list."""
  publicHash_in: [String!]

  """All values that are not contained in given list."""
  publicHash_not_in: [String!]

  """All values less than the given value."""
  publicHash_lt: String

  """All values less than or equal the given value."""
  publicHash_lte: String

  """All values greater than the given value."""
  publicHash_gt: String

  """All values greater than or equal the given value."""
  publicHash_gte: String

  """All values containing the given string."""
  publicHash_contains: String

  """All values not containing the given string."""
  publicHash_not_contains: String

  """All values starting with the given string."""
  publicHash_starts_with: String

  """All values not starting with the given string."""
  publicHash_not_starts_with: String

  """All values ending with the given string."""
  publicHash_ends_with: String

  """All values not ending with the given string."""
  publicHash_not_ends_with: String
  privateHash: String

  """All values that are not equal to given value."""
  privateHash_not: String

  """All values that are contained in given list."""
  privateHash_in: [String!]

  """All values that are not contained in given list."""
  privateHash_not_in: [String!]

  """All values less than the given value."""
  privateHash_lt: String

  """All values less than or equal the given value."""
  privateHash_lte: String

  """All values greater than the given value."""
  privateHash_gt: String

  """All values greater than or equal the given value."""
  privateHash_gte: String

  """All values containing the given string."""
  privateHash_contains: String

  """All values not containing the given string."""
  privateHash_not_contains: String

  """All values starting with the given string."""
  privateHash_starts_with: String

  """All values not starting with the given string."""
  privateHash_not_starts_with: String

  """All values ending with the given string."""
  privateHash_ends_with: String

  """All values not ending with the given string."""
  privateHash_not_ends_with: String
}

input UserWhereUniqueInput {
  id: ID
  email: String
  publicHash: String
  privateHash: String
}
